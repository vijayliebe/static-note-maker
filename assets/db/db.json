{
  "users": [
    {
      "id": 1,
      "user": "admin@admin.com",
      "password": "admin"
    }
  ],
  "subjects": [
    {
      "id": 1,
      "name": "Algorithm",
      "key": "algo"
    },
    {
      "id": 2,
      "name": "Javascript",
      "key": "js"
    },
    {
      "id": 3,
      "name": "ES6",
      "key": "es6"
    },
    {
      "id": 16,
      "name": "Nodejs",
      "key": "node"
    },
    {
      "id": 4,
      "name": "Typescript",
      "key": "ts"
    },
    {
      "id": 5,
      "name": "HTML",
      "key": "html"
    },
    {
      "id": 6,
      "name": "CSS",
      "key": "css"
    },
    {
      "id": 7,
      "name": "Angular",
      "key": "ng"
    },
    {
      "id": 8,
      "name": "React",
      "key": "react"
    },
    {
      "id": 9,
      "name": "Redux",
      "key": "redux"
    },
    {
      "id": 10,
      "name": "Performance",
      "key": "performance"
    },
    {
      "id": 11,
      "name": "System Design",
      "key": "sd"
    },
    {
      "id": 12,
      "name": "Shell Scripting",
      "key": "shell"
    },
    {
      "id": 13,
      "name": "GIT",
      "key": "git"
    },
    {
      "id": 14,
      "name": "Python",
      "key": "py"
    },
    {
      "id": 13,
      "name": "Java",
      "key": "java"
    },
    {
      "id": 15,
      "name": "Others",
      "key": "oth"
    },
    {
      "id": 17,
      "name": "English",
      "key": "eng"
    },
    {
      "id": 18,
      "name": "Puzzles",
      "key": "puz"
    },
    {
      "id": 18,
      "name": "Managerial",
      "key": "man"
    }
  ],
  "categories": [
    {
      "id": "1",
      "name": "String",
      "key": "str",
      "sub": "algo"
    },
    {
      "id": "2",
      "name": "Array",
      "key": "arr",
      "sub": "algo"
    },
    {
      "id": "3",
      "name": "Object|Hash|Mapping",
      "key": "obj",
      "sub": "algo"
    },
    {
      "id": "4",
      "name": "Search",
      "key": "search",
      "sub": "algo"
    },
    {
      "id": "5",
      "name": "Sorting",
      "key": "sort",
      "sub": "algo"
    },
    {
      "id": "51",
      "name": "Logarithms",
      "key": "log",
      "sub": "algo"
    },
    {
      "id": "6",
      "name": "Greedy",
      "key": "greed",
      "sub": "algo"
    },
    {
      "id": "61",
      "name": "Dynamic",
      "key": "dynamic",
      "sub": "algo"
    },
    {
      "id": "62",
      "name": "Recursion",
      "key": "recursion",
      "sub": "algo"
    },
    {
      "id": "7",
      "name": "Tree",
      "key": "tree",
      "sub": "algo"
    },
    {
      "id": "8",
      "name": "Date & Time",
      "key": "datetime",
      "sub": "algo"
    },
    {
      "id": "9",
      "name": "Queue & Stack",
      "key": "queueStack",
      "sub": "algo"
    },
    {
      "id": "10",
      "name": "Syllabus",
      "key": "syllabus",
      "sub": "algo"
    },
    {
      "id": "11",
      "name": "Disk",
      "key": "disk",
      "sub": "shell"
    },
    {
      "name": "Events",
      "key": "events",
      "sub": "js",
      "id": "K8hwS7H"
    },
    {
      "name": "General",
      "key": "general",
      "sub": "js",
      "id": "fLxAGlD"
    },
    {
      "name": "Async",
      "key": "async",
      "sub": "js",
      "id": "CcPDpap"
    },
    {
      "name": "DOM",
      "key": "dom",
      "sub": "js",
      "id": "VcHWFpK"
    },
    {
      "name": "Code Pattern",
      "key": "code_pattern",
      "sub": "js",
      "id": "QkRqsfU"
    },
    {
      "name": "OOPs",
      "key": "oops",
      "sub": "js",
      "id": "S9Hc3Bu"
    },
    {
      "name": "Linked-list",
      "key": "linked-list",
      "sub": "algo",
      "id": "O-ZdpST"
    },
    {
      "name": "Tree",
      "key": "tree",
      "sub": "algo",
      "id": "3Ss3hC0"
    },
    {
      "name": "Caching",
      "key": "caching",
      "sub": "sd",
      "id": "0bEDgF0"
    },
    {
      "name": "General",
      "key": "general",
      "sub": "sd",
      "id": "-5xn9uI"
    },
    {
      "name": "General",
      "key": "general",
      "sub": "es6",
      "id": "vAzKM_l"
    },
    {
      "name": "Numbers",
      "key": "numbers",
      "sub": "algo",
      "id": "Pfw11Yu"
    },
    {
      "name": "General",
      "key": "general",
      "sub": "git",
      "id": "i0w-jut"
    },
    {
      "name": "Framework",
      "key": "framework",
      "sub": "node",
      "id": "o8_tryU"
    },
    {
      "name": "Node Core",
      "key": "node_core",
      "sub": "node",
      "id": "CF6SBM8"
    },
    {
      "name": "Library",
      "key": "library",
      "sub": "node",
      "id": "NZSriI4"
    },
    {
      "name": "Javascript",
      "key": "javascript",
      "sub": "algo",
      "id": "WCnWkkl"
    }
  ],
  "algo": [
    {
      "subject": "algo",
      "title": null,
      "ques": "First non repeating character in a string",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=U7rxgP-fp8E"
        }
      ],
      "tags": [
        {
          "name": "ideserve"
        }
      ],
      "ans": "\nconst firstNonRepeat = (str) => {\n   let strMap = {};\n   for(let i = 0; i < str.length; i++){\n       let char = str[i];\n       if(char in strMap){\n           delete strMap[char];\n       } else {\n           strMap[char] = 1;\n       }\n   }\n   return Object.keys(strMap)[0];\n }\n \n const st = \"ADBCGHIEFKJLADTVDERFSWVGHQWCNOPENSMSJWIERTFB\";\n \n console.log(firstNonRepeat(st));",
      "diff": 2,
      "imp": 2,
      "cate": [
        "str"
      ],
      "id": 5
    },
    {
      "subject": "algo",
      "ques": "Anagram Pattern Search",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=h4MCwdfZZas"
        },
        {
          "name": "https://www.geeksforgeeks.org/anagram-substring-search-search-permutations/"
        }
      ],
      "tags": [
        {
          "name": "ideserve"
        }
      ],
      "ans": "const anyAnagram = (txt, pattern) => {\n       // create map for pattern\n       let pattMap = {};\n       for(let i=0; i<pattern.length; i++){\n           let ch = pattern[i];\n           pattMap[ch] = (ch in pattMap) ? ++pattMap[ch] : 1;\n       }\n \n       // method to compare two maps\n       const compareMap = (m1, m2) => {\n           // console.log(\"compareMap :: m1 : m2 ::::\", m1, \"::\", m2)\n           let keys1 = Object.keys(m1);\n           let keys2 = Object.keys(m2);\n           if(keys1.length != keys2.length){\n               return false;\n           }\n \n           for(let k of keys1){\n               if(m1[k] !== m2[k]){\n               return false;\n               }\n           }\n           return true;\n       }\n \n       let txtMap = {};\n       let insertCount = 0;\n       let firstCharIdx = 0;\n      \n       for(let i=0; i< txt.length; i++){\n           let ch = txt[i];\n           // text map\n           txtMap[ch] = (ch in txtMap) ? ++txtMap[ch] : 1;\n           ++insertCount;\n \n           // If insertion in map == pattern length\n           if(insertCount == pattern.length){\n               // compare map\n               let result = compareMap(pattMap, txtMap);\n               if(result){\n                   return \"Present\";\n               } else {\n                   // remove first ch\n                   let firstChar = txt[firstCharIdx];\n                   if(txtMap[firstChar] == 1){\n                       delete txtMap[firstChar];\n                   } else {\n                       txtMap[firstChar] = txtMap[firstChar] - 1;\n                   }\n                   // reduce insertion count\n                   insertCount = insertCount - 1;\n                   // increase firsr char index\n                   firstCharIdx = firstCharIdx + 1;\n               }\n           }\n       }\n       return \"Not Present\"\n   }\n \n   let Text = \"ideserve\";\n   let Pattern = \"veer\";\n \n   console.log(anyAnagram(Text, Pattern));",
      "diff": 1,
      "imp": 1,
      "cate": [
        "str"
      ],
      "id": 6
    },
    {
      "subject": "algo",
      "title": "In-Place Shuffle",
      "ques": "RANDOMLY Reorder Array in O(N)",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=CoI4S7z1E1Y&ab_channel=CSDojo"
        }
      ],
      "tags": [
        {
          "name": "Lynda"
        },
        {
          "name": "fisher-yates shuffle"
        },
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\nconst reorder = (arr) => {\n    for(let i=arr.length; i>0; i--){\n    \tconst randomIdx = Math.floor(Math.random() * i);\n    \t// swap\n    \tlet temp = arr[randomIdx];\n    \tarr[randomIdx] = arr[i-1];\n    \tarr[i-1] = temp;\n    }\n    return arr;\n}\n\nconsole.log(reorder([1,0,3,9,2]));",
      "diff": 1,
      "imp": 3,
      "cate": [
        "arr",
        "greed"
      ],
      "id": 7
    },
    {
      "subject": "algo",
      "title": "Top Scores",
      "ques": "Write a function that takes: an array of unsortedScores & the highestPossibleScore in the game and returns a sorted array of scores in less than O(n lg n) time.",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\n/*\nconst unsortedScores = [37, 89, 41, 65, 91, 53];\nconst HIGHEST_POSSIBLE_SCORE = 100;\n\nsortScores(unsortedScores, HIGHEST_POSSIBLE_SCORE);\nreturns [91, 89, 65, 53, 41, 37]\n*/\n\nfunction sortScores(unorderedScores, highestPossibleScore) {\n\n    // Array of 0s at indices 0..highestPossibleScore\n    const scoreCounts = new Array(highestPossibleScore + 1).fill(0);\n  \n    // Populate scoreCounts\n    unorderedScores.forEach(score => {\n      scoreCounts[score]++;\n    });\n  \n    // Populate the final sorted array\n    const sortedScores = [];\n  \n    // For each item in scoreCounts\n    for (let score = highestPossibleScore; score >= 0; score--) {\n      const count = scoreCounts[score];\n  \n      // For the number of times the item occurs\n      for (let time = 0; time < count; time++) {\n        sortedScores.push(score);\n      }\n    }\n  \n    return sortedScores;\n  }",
      "diff": 2,
      "imp": 4,
      "cate": [
        "sort"
      ],
      "id": 8
    },
    {
      "subject": "algo",
      "title": "Bracket Validator",
      "ques": "Check for Balanced Brackets in an expression",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\n/*\nInput: exp = “[()]{}{[()()]()}” \nOutput: true\n\nInput: exp = “[(])” \nOutput: false \n\n*/\nfunction isValid(code) {\n\n    const openersToClosers = {\n      '(': ')',\n      '[': ']',\n      '{': '}',\n    };\n  \n    const openers = new Set(['(', '[', '{']);\n    const closers = new Set([')', ']', '}']);\n  \n    const openersStack = [];\n  \n    for (let i = 0; i < code.length; i++) {\n      const char = code.charAt(i);\n  \n      if (openers.has(char)) {\n        openersStack.push(char);\n      } else if (closers.has(char)) {\n        if (!openersStack.length) {\n          return false;\n        }\n        const lastUnclosedOpener = openersStack.pop();\n  \n        // If this closer doesn't correspond to the most recently\n        // seen unclosed opener, short-circuit, returning false\n        if (openersToClosers[lastUnclosedOpener] !== char) {\n          return false;\n        }\n      }\n    }\n    return openersStack.length === 0;\n  }",
      "diff": 4,
      "imp": 4,
      "cate": [
        "queueStack"
      ],
      "id": 9
    },
    {
      "subject": "algo",
      "title": "Permutation Palindrome",
      "ques": "Write an efficient function that checks whether any permutation of an input string is a palindrome.",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "/**\n * \n * Write an efficient function that checks whether any permutation of an input string is a palindrome. \n\nYou can assume the input string only contains lowercase letters.\n\nExamples:\n\n\"civic\" should return true\n\"ivicc\" should return true\n\"civil\" should return false\n\"livci\" should return false\n */\n  function hasPalindromePermutation(theString) {\n\n    // Track characters we've seen an odd number of times\n    const unpairedCharacters = new Set();\n  \n    for (let char of theString) {\n      if (unpairedCharacters.has(char)) {\n        unpairedCharacters.delete(char);\n      } else {\n        unpairedCharacters.add(char);\n      }\n    }\n  \n    // The string has a palindrome permutation if it\n    // has one or zero characters without a pair\n    return unpairedCharacters.size <= 1; // If str length is odd, there will be 1\n  }",
      "diff": 3,
      "imp": 4,
      "cate": [
        "obj"
      ],
      "id": 10
    },
    {
      "subject": "algo",
      "title": "Reverse String",
      "ques": "Take an array of characters and reverse the letter",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\nfunction reverse(arrayOfChars) {\n  let leftIndex = 0;\n  let rightIndex = arrayOfChars.length - 1;\n  while (leftIndex < rightIndex) {\n    // Swap characters\n    const temp = arrayOfChars[leftIndex];\n    arrayOfChars[leftIndex] = arrayOfChars[rightIndex];\n    arrayOfChars[rightIndex] = temp;\n    // Move towards middle leftIndex++; rightIndex--;\n  }\n}\n\n\n// OR\n\nconst reverse2 = (arrayOfChars) => {\n   let s = 0;\n   let m = Math.ceil(arrayOfChars.length / 2);\n\n   while(s < m){\n      let e = (arrayOfChars.length - 1) - s;\n      [arrayOfChars[s], arrayOfChars[e]] = [arrayOfChars[e], arrayOfChars[s]];\n      s = s + 1;\n   }\n   return arrayOfChars;\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "str"
      ],
      "id": 11
    },
    {
      "subject": "algo",
      "title": "Reverse Words",
      "ques": "Takes a message as an array of characters and reverses the order of the words in place",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "/*\nconst message = [ 'c', 'a', 'k', 'e', ' ', 'p', 'o', 'u', 'n', 'd', ' ',\n's', 't', 'e', 'a', 'l' ]; \n\nreverseWords(message);\n\nconsole.log(message.join('')); \n// Prints: 'steal pound cake'\n*/\n\nfunction reverseWords(message) {\n  // First we reverse all the characters in the entire message reverseCharacters(message, 0, message.length - 1);\n  // This gives us the right word order\n  // but with each word backward\n  // Now we'll make the words forward again // by reversing each word's characters\n  // We hold the index of the *start* of the current word // as we look for the *end* of the current word\n  let currentWordStartIndex = 0;\n  for (let i = 0; i <= message.length; i++) {\n    // Found the end of the current word!\n    if (i === message.length || message[i] === \" \") {\n      // If we haven't exhausted the string our\n      // next word's start is one character ahead reverseCharacters(message, currentWordStartIndex, i - 1); currentWordStartIndex = i + 1;\n    }\n  }\n}\nfunction reverseCharacters(message, leftIndex, rightIndex) {\n  // Walk towards the middle, from both sides\n  while (leftIndex < rightIndex) {\n    // Swap the left char and right char const temp = message[leftIndex]; message[leftIndex] = message[rightIndex]; message[rightIndex] = temp;\n    leftIndex++;\n    rightIndex--;\n  }\n}\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "str"
      ],
      "id": 12
    },
    {
      "subject": "algo",
      "title": "Merge Sorted Arrays",
      "ques": "We have our lists of orders sorted numerically already, in arrays. Write a function to merge our arrays of orders into one sorted array",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\n/* const myArray = [3, 4, 6, 10, 11, 15];\nconst alicesArray = [1, 5, 8, 12, 14, 19];\nconsole.log(mergeArrays(myArray, alicesArray));\n// logs [1, 3, 4, 5, 6, 8, 10, 11, 12, 14, 15, 19] \n*/\n\nfunction mergeArrays(myArray, alicesArray) {\n  // Set up our mergedArray const mergedArray = [];\n  let currentIndexAlices = 0;\n  let currentIndexMine = 0;\n  let currentIndexMerged = 0;\n  while (currentIndexMerged < myArray.length + alicesArray.length) {\n    const isMyArrayExhausted = currentIndexMine >= myArray.length;\n    const isAlicesArrayExhausted = currentIndexAlices >= alicesArray.length;\n    // Case: next comes from my array\n    // My array must not be exhausted, and EITHER:\n    // 1) Alice's array IS exhausted, or\n    // 2) The current element in my array is less\n    // than the current element in Alice's array\n    if (\n      !isMyArrayExhausted && (isAlicesArrayExhausted ||\n        myArray[currentIndexMine] < alicesArray[currentIndexAlices])\n    ) {\n      mergedArray[currentIndexMerged] = myArray[currentIndexMine];\n      currentIndexMine++;\n      // Case: next comes from Alice's array \n      \n    } else {\n      mergedArray[currentIndexMerged] = alicesArray[currentIndexAlices];\n      currentIndexAlices++;\n    }\n    currentIndexMerged++;\n  }\n  return mergedArray;\n}\n\n\n// OR\n\nconst mergeArrays = (arr1, arr2) => {\n    let finalArr = [];\n    let arr1Start = 0;\n    let arr2Start = 0;\n    while(arr1Start < arr1.length || arr2Start < arr2.length){\n        if(arr1[arr1Start] && arr2[arr2Start]){\n            if(arr1[arr1Start] < arr2[arr2Start]){\n                finalArr.push(arr1[arr1Start]);\n                arr1Start = arr1Start + 1;\n            } else {\n                finalArr.push(arr2[arr2Start]);\n                arr2Start = arr2Start + 1;\n            } \n        } else if(arr1[arr1Start] && !arr2[arr2Start]){\n                finalArr.push(arr1[arr1Start]);\n                arr1Start = arr1Start + 1;\n        } else if(arr2[arr2Start] && !arr1[arr1Start]){\n            finalArr.push(arr2[arr2Start]);\n            arr2Start = arr2Start + 1;\n        }\n        \n    }\n    return finalArr;\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr",
        "sort"
      ],
      "id": 13
    },
    {
      "subject": "algo",
      "title": "Cafe Order Checker",
      "ques": "Given all three arrays, write a function to check that my service is first-come, first-served.\nAll food should come out in the same order customer requested it",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "/* As an example,\n   Take Out Orders: [1, 3, 5]\n    Dine In Orders: [2, 4, 6]\n     Served Orders: [1, 2, 4, 6, 5, 3]\nwould not be first-come, first-served, since order 3 was requested before order 5 but order 5 was served first.\n\nBut,\n    T\n    ake Out Orders: [17, 8, 24]\n    Dine In Orders: [12, 19, 2]\n     Served Orders: [17, 8, 12, 19, 24, 2]\n\nwould be first-come, first-served.\n\nNote - Order numbers are arbitrary. They do not have to be in increasing order. */\n\nfunction isFirstComeFirstServed(takeOutOrders, dineInOrders, servedOrders) {\n    var takeOutOrdersIndex = 0;\n    var dineInOrdersIndex = 0;\n    var takeOutOrdersMaxIndex = takeOutOrders.length - 1;\n    var dineInOrdersMaxIndex = dineInOrders.length - 1;\n    for (var i = 0; i < servedOrders.length; i++) {\n        var order = servedOrders[i];\n        // if we still have orders in takeOutOrders\n        // and the current order in takeOutOrders is the same // as the current order in servedOrders\n        if (takeOutOrdersIndex <= takeOutOrdersMaxIndex &&\n            order === takeOutOrders[takeOutOrdersIndex]) {\n            takeOutOrdersIndex++;\n            // if we still have orders in dineInOrders\n            // and the current order in dineInOrders is the same // as the current order in servedOrders\n        } else if (dineInOrdersIndex <= dineInOrdersMaxIndex &&\n            order === dineInOrders[dineInOrdersIndex]) {\n            dineInOrdersIndex++;\n            // if the current order in servedOrders doesn't match the current\n            // order in takeOutOrders or dineInOrders, then we're not serving first-come, // first-served\n        } else {\n            return false;\n        }\n    }\n    // check for any extra orders at the end of takeOutOrders or dineInOrders if (dineInOrdersIndex != dineInOrders.length ||\n    takeOutOrdersIndex != takeOutOrders.length) {\n    return false;\n}\n// all orders in servedOrders have been \"accounted for\" // so we're serving first-come, first-served!\nreturn true;\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr",
        "sort",
        "greed"
      ],
      "id": 14
    },
    {
      "subject": "algo",
      "title": "Inflight Entertainment",
      "ques": "Write a function that takes an integer (in minutes) and an array of integers movieLengths(in minutes) and returns a boolean indicating whether there are two numbers in movieLengths whose sum equals flightLength",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\nfunction canTwoMoviesFillFlight(movieLengths, flightLength) {\n    // Movie lengths we've seen so far \n    const movieLengthsSeen = new Set();\n    for (let i = 0; i < movieLengths.length; i++) {\n        const firstMovieLength = movieLengths[i];\n        const matchingSecondMovieLength = flightLength - firstMovieLength;\n        if (movieLengthsSeen.has(matchingSecondMovieLength)) {\n            return true;\n        }\n        movieLengthsSeen.add(firstMovieLength);\n    }\n    // We never found a match, so return false\n    return false;\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "obj"
      ],
      "id": 15
    },
    {
      "subject": "algo",
      "title": "Word Cloud Data",
      "ques": "Write code that takes a long string and builds its word cloud data in a map , where the keys are words and the values are the number of times the words occurred.",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\nclass WordCloudData {\n    constructor(inputString) {\n        this.wordsToCounts = new Map();\n        this.populateWordsToCounts(inputString);\n    }\n    populateWordsToCounts(inputString) {\n        // Iterates over each character in the input string, splitting \n        // words and passing them to this.addWordToMap()\n        let currentWordStartIndex = 0;\n        let currentWordLength = 0;\n        for (let i = 0; i < inputString.length; i++) {\n            const character = inputString.charAt(i);\n            // If we reached the end of the string we check if the last \n            // character is a letter and add the last word to our map \n            if (i === inputString.length - 1) {\n                if (this.isLetter(character)) {\n                    currentWordLength += 1;\n                }\n                if (currentWordLength > 0) {\n                    const word = inputString.slice(currentWordStartIndex, currentWordStartIndex + currentWordLength);\n                    this.addWordToMap(word);\n                }\n                \n            // If we reach a space or emdash we know we're at the end of a word\n            // so we add it to our map and reset our current word\n            } else if (character === ' ' || character === '\\u2014') {\n            if (currentWordLength > 0) {\n                const word = inputString.slice(currentWordStartIndex,\n                    currentWordStartIndex + currentWordLength);\n                this.addWordToMap(word);\n                currentWordLength = 0;\n            }\n            // We want to make sure we split on ellipses so if we get two periods in\n            // a row we add the current word to our map and reset our current word\n        } else if (character === '.') {\n            if (i < inputString.length - 1 && inputString.charAt(i + 1) === '.') {\n                if (currentWordLength > 0) {\n                    const word = inputString.slice(currentWordStartIndex, currentWordStartIndex + currentWordLength);\n                    this.addWordToMap(word);\n                    currentWordLength = 0;\n                    tpircSavaJ\n                }\n            }\n            // If the character is a letter or an apostrophe, we add it to our current word\n        } else if (this.isLetter(character) || character === '\\'') {\n            if (currentWordLength === 0) {\n                currentWordStartIndex = i;\n            }\n            currentWordLength += 1;\n            // If the character is a hyphen, we want to check if it's surrounded by letters\n            // if it is, we add it to our current word\n        } else if (character === '-') {\n            if (i > 0 && this.isLetter(inputString.charAt(i - 1)) && this.isLetter(inputString.charAt(i + 1))) {\n                currentWordLength += 1;\n            } else {\n                if (currentWordLength > 0) {\n                    const word = inputString.slice(currentWordStartIndex, currentWordStartIndex + currentWordLength);\n                    this.addWordToMap(word);\n                    currentWordLength = 0;\n                }\n            }\n        }\n    }\n}\naddWordToMap(word) {\n    let newCount;\n    // If the word is already in the map we increment its count if (this.wordsToCounts.has(word)) {\n    newCount = this.wordsToCounts.get(word) + 1;\n    this.wordsToCounts.set(word, newCount);\n    // If a lowercase version is in the map, we know our input word must be uppercase \n    // but we only include uppercase words if they're always uppercase\n    // so we just increment the lowercase version's count\n} else if (this.wordsToCounts.has(word.toLowerCase())) {\n    newCount = this.wordsToCounts.get(word.toLowerCase()) + 1;\n    this.wordsToCounts.set(word.toLowerCase(), newCount);\n    // If an uppercase version is in the map, we know our input word must be lowercase.\n    // since we only include uppercase words if they're always uppercase, we add the // lowercase version and give it the uppercase version's count\n} else if (this.wordsToCounts.has(this.capitalize(word))) {\n    newCount = this.wordsToCounts.get(this.capitalize(word)) + 1;\n\n    this.wordsToCounts.set(word, newCount);\n    this.wordsToCounts.delete(this.capitalize(word));\n    // Otherwise, the word is not in the map at all, lowercase or uppercase\n    // so we add it to the map\n} else {\n    this.wordsToCounts.set(word, 1);\n}\n}\ncapitalize(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n}\nisLetter(character) {\n    return 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(character) >= 0;\n}\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "obj"
      ],
      "id": 16
    },
    {
      "subject": "algo",
      "title": "Apple Stocks",
      "ques": "Write an efficient function that takes stock_prices and returns the best profit I could have made from one purchase and one sale of one share of Apple stock yesterday",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "/**\n * .\n\nFor example:\n\n  stock_prices = [10, 7, 5, 8, 11, 9]\n\nget_max_profit(stock_prices)\n# Returns 6 (buying for $5 and selling for $11)\n\nPython 3.6\nNo \"shorting\"—you need to buy before you can sell. Also, you can't buy and sell in the same time step—at least 1 minute has to pass.\n */\n\nfunction getMaxProfit(stockPrices) {\n    let maxProfit = 0;\n  \n    // Go through every time\n    for (let outerTime = 0; outerTime < stockPrices.length; outerTime++) {\n  \n      // For each time, go through every other time\n      for (let innerTime = 0; innerTime < stockPrices.length; innerTime++) {\n  \n        // For each pair, find the earlier and later times\n        const earlierTime = Math.min(outerTime, innerTime);\n        const laterTime = Math.max(outerTime, innerTime);\n  \n        // And use those to find the earlier and later prices\n        const earlierPrice = stockPrices[earlierTime];\n        const laterPrice = stockPrices[laterTime];\n  \n        // See what our profit would be if we bought at the\n        // min price and sold at the current price\n        const potentialProfit = laterPrice - earlierPrice;\n  \n        // Update maxProfit if we can do better\n        maxProfit = Math.max(maxProfit, potentialProfit);\n      }\n    }\n  \n    return maxProfit;\n  }\n\n\n\n\n  ",
      "diff": 1,
      "imp": 1,
      "cate": [
        "greed"
      ],
      "id": 17
    },
    {
      "subject": "algo",
      "title": "Highest Product of 3",
      "ques": "Given an array of integers, find the highest product you can get from three of the integers.",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "function highestProductOf3(arrayOfInts) {\n    if (arrayOfInts.length < 3) {\n        throw new Error(\"Less than 3 items!\");\n    }\n    // We're going to start at the 3rd item (at index 2)\n    // So pre-populate highests and lowests based on the first 2 items\n    // We could also start these as null and check below if they're set\n    // but this is arguably cleaner\n    let highest = Math.max(arrayOfInts[0], arrayOfInts[1]);\n    let lowest = Math.min(arrayOfInts[0], arrayOfInts[1]);\n\n    let highestProductOf2 = arrayOfInts[0] * arrayOfInts[1];\n\n    let lowestProductOf2 = arrayOfInts[0] * arrayOfInts[1];\n    // Except this one--we pre-populate it for the first *3* items\n    // This means in our first pass it'll check against itself, which is fine\n    let highestProductOf3 = arrayOfInts[0] * arrayOfInts[1] * arrayOfInts[2];\n    // Walk through items, starting at index 2\n    for (let i = 2; i < arrayOfInts.length; i++) {\n        const current = arrayOfInts[i];\n        // Do we have a new highest product of 3?\n        // It's either the current highest\n        // or the current times the highest product of two\n        // or the current times the lowest product of two\n        highestProductOf3 = Math.max(\n            highestProductOf3,\n            current * highestProductOf2,\n            current * lowestProductOf2\n        );\n        // Do we have a new highest product of two?\n        highestProductOf2 = Math.max(\n            highestProductOf2,\n            current * highest,\n            current * lowest\n        );\n        // Do we have a new lowest product of two?\n        lowestProductOf2 = Math.min(\n            lowestProductOf2,\n            current * highest,\n            current * lowest\n        );\n        // Do we have a new highest?\n\n        highest = Math.max(highest, current);\n        // Do we have a new lowest?\n        lowest = Math.min(lowest, current);\n    }\n    return highestProductOf3;\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "greed"
      ],
      "id": 18
    },
    {
      "subject": "algo",
      "title": "Product of All Other Numbers",
      "ques": "You have an array of integers, and for each index you want to find the product of every integer except the integer at that index",
      "links": [
        {
          "name": "https://www.interviewcake.com/question/javascript/product-of-other-numbers?course=fc1&section=greedy"
        }
      ],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "function getProductsOfAllIntsExceptAtIndex(intArray) {\n    if (intArray.length < 2) {\n        throw new Error('Getting the product of numbers at other indices requires at least 2 numbers');\n    }\n\n    const productsOfAllIntsExceptAtIndex = [];\n\n    // For each integer, we find the product of all the integers\n    // before it, storing the total product so far each time\n    let productSoFar = 1;\n    for (let i = 0; i < intArray.length; i++) {\n        productsOfAllIntsExceptAtIndex[i] = productSoFar;\n        productSoFar *= intArray[i];\n    }\n\n    // For each integer, we find the product of all the integers\n    // after it. since each index in products already has the\n    // product of all the integers before it, now we're storing\n    // the total product of all other integers\n    productSoFar = 1;\n    for (let j = intArray.length - 1; j >= 0; j--) {\n        productsOfAllIntsExceptAtIndex[j] *= productSoFar;\n        productSoFar *= intArray[j];\n    }\n\n    return productsOfAllIntsExceptAtIndex;\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "greed"
      ],
      "id": 19
    },
    {
      "subject": "algo",
      "title": "Merging Meeting Times",
      "ques": "Write a function mergeRanges() that takes an array of multiple meeting time ranges and returns an array of condensed ranges.",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\nfunction mergeRanges(meetings) {\n  // Create a deep copy of the meetings array\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign# \n  const meetingsCopy = JSON.parse(JSON.stringify(meetings));\n  \n  // Sort by start time\n  const sortedMeetings = meetingsCopy.sort((a, b) => {\n    return a.startTime - b.startTime;\n  });\n  \n  // Initialize mergedMeetings with the earliest meeting\n  const mergedMeetings = [sortedMeetings[0]];\n  for (let i = 1; i < sortedMeetings.length; i++) {\n    const currentMeeting = sortedMeetings[i];\n    const lastMergedMeeting = mergedMeetings[mergedMeetings.length - 1];\n    \n    // If the current meeting overlaps with the last merged meeting, use the\n    // later end time of the two\n    if (currentMeeting.startTime <= lastMergedMeeting.endTime) {\n      lastMergedMeeting.endTime = Math.max(\n        lastMergedMeeting.endTime,\n        currentMeeting.endTime\n      );\n    } else {\n      // Add the current meeting since it doesn't overlap\n      mergedMeetings.push(currentMeeting);\n    }\n  }\n  return mergedMeetings;\n}\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr",
        "sort",
        "datetime"
      ],
      "id": 20
    },
    {
      "subject": "algo",
      "title": "Find Rotation Point",
      "ques": "Write a function for finding the index of the \"rotation point",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "/*\nconst words = [\n  'ptolemaic',\n  'retrograde',\n  'supplant',\n  'undulate',\n  'xenoepist',\n  'asymptote',  // <-- rotates here!\n  'babka',\n  'banoffee',\n  'engender',\n  'karpatka',\n  'othellolagkage',\n];\n*/\n\nfunction findRotationPoint(words) {\n  const firstWord = words[0];\n  let floorIndex = 0;\n  let ceilingIndex = words.length - 1;\n  while (floorIndex < ceilingIndex) {\n    // Guess a point halfway between floor and ceiling\n    const guessIndex = Math.floor(floorIndex + (ceilingIndex - floorIndex) / 2);\n    // If guess comes after first word or is the first word\n    if (words[guessIndex] >= firstWord) {\n      // Go right\n      floorIndex = guessIndex;\n    } else {\n      // Go left\n      ceilingIndex = guessIndex;\n    }\n    // If floor and ceiling have converged\n    if (floorIndex + 1 === ceilingIndex) {\n      // Between floor and ceiling is where we flipped to the beginning\n      // so ceiling is alphabetically first\n      break;\n    }\n  }\n  return ceilingIndex;\n}\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "search"
      ],
      "id": 21
    },
    {
      "subject": "algo",
      "title": "Find Repeat, Space Edition",
      "ques": "Write a function which finds an integer that appears more than once in our array(If there are multiple duplicates, you only need to find one of them)",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        },
        {
          "name": "Duplicate inArray"
        }
      ],
      "ans": "function findRepeat(numbers) {\n  let floor = 1;\n  let ceiling = numbers.length - 1;\n  while (floor < ceiling) {\n    // Divide our range 1..n into an upper range and lower range\n    // (such that they don't overlap)\n    // lower range is floor..midpoint\n    // upper range is midpoint+1..ceiling\n    const midpoint = Math.floor(floor + (ceiling - floor) / 2);\n    const lowerRangeFloor = floor;\n    const lowerRangeCeiling = midpoint;\n    const upperRangeFloor = midpoint + 1;\n    const upperRangeCeiling = ceiling;\n    const distinctPossibleIntegersInLowerRange = lowerRangeCeiling - lowerRangeFloor + 1;\n\n    // Count number of items in lower range\n    let itemsInLowerRange = 0;\n    numbers.forEach((item) => {\n      // Is it in the lower range?\n      if (item >= lowerRangeFloor && item <= lowerRangeCeiling) {\n        itemsInLowerRange += 1;\n      }\n    });\n    if (itemsInLowerRange > distinctPossibleIntegersInLowerRange) {\n      // There must be a duplicate in the lower range\n      // so use the same approach iteratively on that range\n      floor = lowerRangeFloor;\n      ceiling = lowerRangeCeiling;\n    } else {\n      // There must be a duplicate in the upper range\n      // so use the same approach iteratively on that range \n      floor = upperRangeFloor;\n      ceiling = upperRangeCeiling;\n    }\n  }\n  // Floor and ceiling have converged\n  // We found a number that repeats!\n  return floor;\n}\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "search"
      ],
      "id": 22
    },
    {
      "subject": "algo",
      "title": "Recursive String Permutations",
      "ques": "Write a recursive function for generating all permutations of an input string. Return them as a set.",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        },
        {
          "name": "Permutations"
        }
      ],
      "ans": "function getPermutations(string) {\n  // Base case\n  if (string.length <= 1) {\n    return new Set([string]);\n  }\n  const allCharsExceptLast = string.slice(0, -1);\n  const lastChar = string[string.length - 1];\n\n  // Recursive call: get all possible permutations for all chars except last\n  const permutationsOfAllCharsExceptLast = getPermutations(allCharsExceptLast);\n\n  // Put the last char in all possible positions for each of the above permutations\n  const permutations = new Set();\n  permutationsOfAllCharsExceptLast.forEach(\n    (permutationOfAllCharsExceptLast) => {\n      for (\n        let position = 0;\n        position <= allCharsExceptLast.length;\n        position++\n      ) {\n        const permutation =\n          permutationOfAllCharsExceptLast.slice(0, position) + lastChar + pe;\n        permutations.add(permutation);\n      }\n    }\n  );\n  return permutations;\n}\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "dynamic",
        "recursion"
      ],
      "id": 23
    },
    {
      "subject": "algo",
      "title": "Syllabus :",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "Interview Cake"
        }
      ],
      "ans": "\n1.Array and string manipulation\n    a.Merging Meeting Times\n    b.Reverse String in Place\n    c.Reverse Words\n    d.Merge Sorted Arrays\n    e.Cafe Order Checker\n    \n2.Hashing & Hash tables\n    a.Inflight Entertainment\n    b.Permutation Palindrome\n    c. Word Cloud Data\n    \n3.Greedy algorithms\n    a.Apple Stocks\n    b.Highest Product of 3\n    c.Product of All Other Numbers\n    d.Cafe Order Checker\n    e.In-place shuffle\n    \n4.Sorting, searching and logarithms\n    a.Find Rotation Point\n    b.Find Repeat, Space Edition\n    c.Top Scores\n    d.Merging Meeting Times\n    \n5.Trees and graphs\n    a.Balanced Binary Tree\n    b.Binary Search Tree Checker\n    c.2nd Largest Item in a Binary Search Tree\n    d.Graph Coloring\n    e.Mesh Message\n    f.Find Repeat, Space Edition BEAST MODE\n    \n6.Dynamic Programming and recursion\n    a.Recursive String Permutations\n    b.Compute the nth Fibonacci Number\n    c.Making Change\n    d.The Cake Thief\n    e.Balanced Binary Tree\n    f.Binary Search Tree Checker\n    g.2nd Largest Item in a Binary Search Tree\n    \n7.Queues and stacks\n    a.Largest stack\n    b.Implement a Queue with two stacks\n    c.Parenthesis Matching\n    d.Bracket Validator\n    \n8.Linked lists\n    a.Delete Node\n    b.Does this Linked List Have a cycle\n    c.Reverse a linked list\n    d.Kth to last Node in as Singly-Linked list\n    e.Find Repeat, Space Edition BEAST MODE\n    \n    \n    \n    \n    \n    \n    \n    \n    ",
      "diff": 1,
      "imp": 1,
      "cate": [
        "syllabus"
      ],
      "id": 24
    },
    {
      "subject": "algo",
      "title": "Type of array and its maximum element",
      "ques": "Given an array, it can be of 4 types. \n(a) Ascending \n(b) Descending \n(c) Ascending Rotated \n(d) Descending Rotated \nFind out which kind of array it is and return the maximum of that array.",
      "links": [
        {
          "name": "https://www.geeksforgeeks.org/type-array-maximum-element/"
        }
      ],
      "tags": [
        {
          "name": "GeeksforGeeks"
        },
        {
          "name": "Amazon"
        }
      ],
      "ans": "\n/*\nInput :  arr[] = { 2, 1, 5, 4, 3}\nOutput : Descending rotated with maximum element 5\n\nInput :  arr[] = { 3, 4, 5, 1, 2}\nOutput : Ascending rotated with maximum element 5\n\n\n\n====\n\nlet x1 = [2, 1, 5, 4, 3]; // Descending Rotated\nlet x2 = [3, 4, 5, 1, 2]; // Ascending Rotated\nlet a1 = [1, 1, 1, 2, 3, 4, 5, 6, 6, 6]; // Ascending\nlet a2 = [6, 6, 6, 5, 4, 3, 2, 1, 1, 1]; // Descending\nlet a3 = [3, 2, 1, 1, 1, 6, 6, 6, 5, 4]; // Descending rotated\nlet a4 = [4, 5, 6, 6, 6, 1, 1, 1, 2, 3]; // Ascending rotated\n\nconsole.log(\"*Descending Rotated :: \", findType(x1));\nconsole.log(\"*Ascending Rotated ::\", findType(x2));\nconsole.log(\"Ascending :: \", findType(a1));\nconsole.log(\"Descending :: \", findType(a2));\nconsole.log(\"Descending rotated :: \", findType(a3));\nconsole.log(\"Ascending rotated :: \", findType(a4));\n*/\n\nfunction findType(arr, n) {\n  // To store the minimum and the maximum\n  // element from the array\n  let min_element = Number.MAX_VALUE,\n    max_element = Number.MIN_VALUE;\n\n  // To store the first and the last occurrences\n  // of the minimum and the maximum\n  // element from the array\n  let min_index1 = -1,\n    max_index1 = -1,\n    max_index2 = -1,\n    min_index2 = -1;\n\n  for (let i = 0; i < n; i++) {\n    // If new minimum is found\n    if (arr[i] < min_element) {\n      // Update the minimum so far\n      // and its occurrences\n      min_element = arr[i];\n      min_index1 = i;\n      min_index2 = i;\n    }\n\n    // If current element is equal the found\n    // minimum so far then update the last\n    // occurrence of the minimum element\n    else if (arr[i] == min_element){\n     // console.log(\"ELSE Min :: i :: arr[i] ::::\", i,\"::\",arr[i]);  \n      min_index2 = i;\n    } \n\n    // If new maximum is found\n    if (arr[i] > max_element) {\n      // Update the maximum so far\n      // and its occurrences\n      max_element = arr[i];\n      max_index1 = i;\n      max_index2 = i;\n    }\n\n    // If current element is equal the found\n    // maximum so far then update the last\n    // occurrence of the maximum element\n    else if (arr[i] == max_element) {\n      max_index2 = i;\n    }\n  }\n  \n  console.log(\"MIN :: min_element :: min_index1 :: min_index2 ::::\", min_element,\"::\",min_index1,\"::\",min_index2);\n  console.log(\"MAX :: max_element :: max_index1 :: max_index2 ::::\", max_element,\"::\",max_index1,\"::\",max_index2);\n\n  // First occurrence of minimum element is at the\n  // beginning of the array and the last occurrence\n  // of the maximum element is at the end of the\n  // array then the array is sorted in ascending\n  // For example, {1, 1, 1, 2, 3, 4, 5, 6, 6, 6}\n  if (min_index1 == 0 && max_index2 == n - 1) {\n    console.log(\"Ascending with maximum\" + \" element = \" + max_element);\n  }\n\n  // First occurrence of maximum element is at the\n  // beginning of the array and the last occurrence\n  // of the minimum element is at the end of the\n  // array then the array is sorted in descending\n  // For example, {6, 6, 6, 5, 4, 3, 2, 1, 1, 1}\n  else if (max_index1 == 0 && min_index2 == n - 1) {\n    console.log(\"Descending with maximum\" + \" element = \" + max_element);\n  }\n\n  // First occurrence of maximum element is equal\n  // to the last occurrence of the minimum element + 1\n  // then the array is descending and rotated\n  // For example, {3, 2, 1, 1, 1, 6, 6, 6, 5, 4}\n  else if (max_index1 == min_index2 + 1) {\n    console.log(\n      \"Descending rotated with \" + \"maximum element = \" + max_element\n    );\n  }\n\n  // First occurrence of minimum element is equal\n  // to the last occurrence of the maximum element + 1\n  // then the array is ascending and rotated\n  // For example, {4, 5, 6, 6, 6, 1, 1, 1, 2, 3}\n  else {\n    console.log(\"Ascending rotated with \" + \"maximum element = \" + max_element);\n  }\n}\n\nlet arr1 = [5,4,3,2,1];\n\nlet arr4 = [4, 5, 6, 6, 6, 1, 1, 1, 2, 3];\n\nfindType(arr1, arr1.length);\n",
      "diff": 4,
      "imp": 4,
      "cate": [
        "arr"
      ],
      "id": 25
    },
    {
      "subject": "algo",
      "title": "Rearrange characters in a string such that no two adjacent are same",
      "ques": "Given a string with repeated characters, the task is to rearrange characters in a string so that no two adjacent characters are same.\nNote : It may be assumed that the string has only lowercase English alphabets.",
      "links": [
        {
          "name": "https://www.geeksforgeeks.org/rearrange-characters-string-no-two-adjacent/"
        }
      ],
      "tags": [
        {
          "name": "GeeksforGeeks"
        },
        {
          "name": "Amazon"
        }
      ],
      "ans": "\n/*\nInput: aaabc \nOutput: abaca \n\nInput: aaabb\nOutput: ababa \n\nInput: aa \nOutput: Not Possible\n\nInput: aaaabc \nOutput: Not Possible\n*/",
      "diff": 4,
      "imp": 3,
      "cate": [
        "str"
      ],
      "id": 26
    },
    {
      "subject": "algo",
      "title": "List of problems sorted in increasing order of difficulty",
      "ques": "",
      "links": [
        {
          "name": "https://www.ideserve.co.in/learn/dynamic-programming-interview-questions"
        }
      ],
      "tags": [
        {
          "name": "ideserve"
        }
      ],
      "ans": "",
      "diff": 3,
      "imp": 4,
      "cate": [
        "dynamic"
      ],
      "id": 27
    },
    {
      "subject": "algo",
      "title": "Binary Search",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "  function binarySearch(key, inputArray) {\r\n      var low  = 0,\r\n          high = inputArray.length - 1,\r\n          mid;\r\n\r\n      while (low <= high) {\r\n          mid = low + (high - low) / 2;\r\n          if ((mid % 1) > 0) { mid = Math.ceil(mid); }\r\n\r\n          if (key < inputArray[mid]) { high = mid - 1; }\r\n          else if (key > inputArray[mid]) { low = mid + 1; }\r\n          else { return mid; }\r\n      }\r\n\r\n      return null;\r\n  }\r\n\r\n  // run the binary search\r\n  binarySearch(3, [1,2,4]); //returns null\r\n  binarySearch(3, [2,3,5]); //returns 1",
      "diff": 1,
      "imp": 1,
      "cate": [
        "search"
      ],
      "id": 28
    },
    {
      "subject": "algo",
      "title": "Merge Sort",
      "ques": "",
      "links": [
        {
          "name": "https://stackabuse.com/merge-sort-in-javascript/"
        }
      ],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "function mergeSort(array) {\n  const half = array.length / 2\n  \n  // Base case or terminating case\n  if(array.length < 2){\n    return array \n  }\n  \n  const left = array.splice(0, half)\n  return merge(mergeSort(left),mergeSort(array))\n}\n\nfunction merge(left, right) {\n    let arr = []\n    // Break out of loop if any one of the array gets empty\n    while (left.length && right.length) {\n        // Pick the smaller among the smallest element of left and right sub arrays \n        if (left[0] < right[0]) {\n            arr.push(left.shift())  \n        } else {\n            arr.push(right.shift()) \n        }\n    }\n    \n    // Concatenating the leftover elements\n    // (in case we didn't go through the entire left or right array)\n    return [ ...arr, ...left, ...right ]\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "sort"
      ],
      "id": 29
    },
    {
      "subject": "algo",
      "title": "All possible permutation of number",
      "ques": "",
      "links": [
        {
          "name": "https://medium.com/weekly-webtips/step-by-step-guide-to-array-permutation-using-recursion-in-javascript-4e76188b88ff"
        }
      ],
      "tags": [
        {
          "name": "General"
        },
        {
          "name": "Permutations"
        }
      ],
      "ans": "var permArr = [],\n  usedChars = [];\n\nfunction permute(input) {\n  var i, ch;\n  for (i = 0; i < input.length; i++) {\n    ch = input.splice(i, 1)[0];\n    usedChars.push(ch);\n    if (input.length == 0) {\n      permArr.push(usedChars.slice());\n    }\n    permute(input);\n    input.splice(i, 0, ch);\n    usedChars.pop();\n  }\n  return permArr\n};\n\n\nconsole.log(permute([5, 3, 7, 1]));",
      "diff": 1,
      "imp": 1,
      "cate": [
        "str",
        "arr"
      ],
      "id": 30
    },
    {
      "subject": "algo",
      "title": "Array Rotation",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "function rotatedArray(arr, times){\n   times = times % arr.length;\n   for(var i=arr.length -1; i>arr.length - 1 - times; i--){\n       var pop = arr.pop();\n       arr.unshift(pop);\n   }\n   return arr;\n}\n\n\nfunction reverseArray(arr, startIndex, EndIndex){\n  /* if(startIndex === EndIndex){\n       return \"Not valid start and end Index\";\n   }*/\n\n\n   while(startIndex < EndIndex){\n       var temp = arr[startIndex];\n       arr[startIndex]  = arr[EndIndex];\n       arr[EndIndex] = temp;\n\n\n       startIndex = startIndex + 1;\n       EndIndex = EndIndex - 1;\n  }\n\n\n   return arr;\n\n\n}\n\n\nfunction rotatedArray2(arr, times){\n    times = times % arr.length;\n   var splitArrayIndex = arr.length - times - 1;\n\n\n   arr = reverseArray(arr, 0,splitArrayIndex);\n   arr = reverseArray(arr, splitArrayIndex + 1, arr.length - 1);\n   arr = reverseArray(arr, 0, arr.length - 1);\n\n\n   return arr;\n}\n\n\n\n\nvar arr = [1,2,3,4,5, 6,7,8];\nrotatedArray(arr, 3);\n\n\nvar arr = [1,2,3,4,5, 6,7,8];\nreverseArray(arr, 5,7);",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr"
      ],
      "id": 31
    },
    {
      "subject": "algo",
      "title": "Segregate 0's, 1's and 2's together in an array[O(n)](Dutch National Flag Problem)",
      "ques": "",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=BOt1DAvR0zI&ab_channel=VivekanandKhyade-AlgorithmEveryDay"
        }
      ],
      "tags": [
        {
          "name": "Dutch National Flag Problem"
        },
        {
          "name": "youtube"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr"
      ],
      "id": 32
    },
    {
      "subject": "algo",
      "title": "Find the missing number in the increasing sequence",
      "ques": "",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=yxYCiBja8_s&ab_channel=IDeserve"
        }
      ],
      "tags": [
        {
          "name": "ideserve"
        }
      ],
      "ans": "// total = n*(n+1)/2",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr"
      ],
      "id": 33
    },
    {
      "subject": "algo",
      "title": "Remove duplicate in Array in single loop",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "Duplicate inArray"
        }
      ],
      "ans": "var t1 = [1,2,3,2,3];\n\nfunction duplicateInArray(){\n  for(var i=0; i<t1.length; i++){\n    if(t1[Math.abs(t1[i])] > 0){\n      t1[Math.abs(t1[i])] = -t1[Math.abs(t1[i])];\n    }else{\n      console.log('Element '+Math.abs(t1[i])+' duplicate at '+i);\n    }\n  }\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr"
      ],
      "id": 34
    },
    {
      "subject": "algo",
      "title": "Doubly linked list - basics (ES5)",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "\nfunction LinkedList() {\n  this.head = null;\n  this.tail = null;\n}\n \nfunction Node(value, next, prev) {\n  this.value = value;\n  this.next = next;\n  this.prev = prev;\n}\n \nLinkedList.prototype.addToHead = function(value) {\n  var newNode = new Node(value, this.head, null);\n  if (this.head) this.head.prev = newNode;\n  else this.tail = newNode;\n  this.head = newNode;\n};\n \nLinkedList.prototype.addToTail = function(value) {\n  var newNode = new Node(value, null, this.tail);\n  if (this.tail) this.tail.next = newNode;\n  else this.head = newNode;\n  this.tail = newNode;\n};\n \nLinkedList.prototype.removeHead = function() {\n  if (!this.head) return null;\n  var val = this.head.value;\n  this.head = this.head.next;\n  if (this.head) this.head.prev = null;\n  else this.tail = null;\n  return val;\n};\n \nLinkedList.prototype.removeTail = function() {\n  if (!this.tail) return null;\n  var val = this.tail.value;\n  this.tail = this.tail.prev;\n  if (this.tail) this.tail.next = null;\n  else this.head = null;\n  return val;\n};\n \nLinkedList.prototype.search = function(searchValue) {\n  var currentNode = this.head;\n  while (currentNode) {\n    if (currentNode.value === searchValue) return currentNode.value;\n    currentNode = currentNode.next;\n  } \n  return null;\n};\n \nLinkedList.prototype.indexOf = function(value) {\n  var indexes = [];\n  var currentIndex = 0;\n  var currentNode = this.head;\n  while(currentNode) {\n    if (currentNode.value === value) indexes.push(currentIndex);\n    currentNode = currentNode.next;\n    currentIndex++;\n  }\n  return indexes;\n};\n \n \nvar myLL = new LinkedList();\n \nmyLL.addToHead(123);\nmyLL.addToHead(70);\nmyLL.addToHead('hello');\nmyLL.addToTail(19);\nmyLL.addToTail('world');\nmyLL.addToTail(20);",
      "diff": 1,
      "imp": 1,
      "cate": [
        "linked-list"
      ],
      "id": 35
    },
    {
      "subject": "algo",
      "title": "Basic binary tree implementation (ES5)",
      "ques": "",
      "links": [
        {
          "name": "https://faculty.cs.niu.edu/~mcmahon/CS241/Notes/Data_Structures/binary_tree_traversals.html"
        }
      ],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "\nfunction BST(value) {\n  this.value = value;\n  this.right = null;\n  this.left = null;\n}\n \nBST.prototype.insert = function(value) {\n  if (value <= this.value) {\n    if (!this.left) this.left = new BST(value);\n    else this.left.insert(value);\n  }\n  else if (value > this.value) {\n    if (!this.right) this.right = new BST(value);\n    else this.right.insert(value);\n  }\n};\n \nBST.prototype.contains = function(value) {\n  if (this.value === value) return true;\n  if (value < this.value) {\n    if (!this.left) return false;\n    else return this.left.contains(value);\n  }\n  else if (value > this.value) {\n    if (!this.right) return false;\n    else return this.right.contains(value);\n  }\n};\n \nBST.prototype.depthFirstTraversal = function(iteratorFunc, order) {\n  if (order === 'pre-order') iteratorFunc(this.value);\n  if (this.left) this.left.depthFirstTraversal(iteratorFunc, order);\n  if (order === 'in-order') iteratorFunc(this.value);\n  if (this.right) this.right.depthFirstTraversal(iteratorFunc, order);\n  if (order === 'post-order') iteratorFunc(this.value);\n};\n \nBST.prototype.breadthFirstTraversal = function(iteratorFunc) { /*** IMP ***/\n  var queue = [this];\n  while (queue.length) {\n    var treeNode = queue.shift();  /*** IMP ***/\n    iteratorFunc(treeNode);\n    if (treeNode.left) queue.push(treeNode.left);\n    if (treeNode.right) queue.push(treeNode.right);\n  }\n};\n \nfunction log(value) {\n    console.log(value);\n};\n \nBST.prototype.getMinVal = function() {\n  if (this.left) return this.left.getMinVal();\n  else return this.value;\n};\n \nBST.prototype.getMaxVal = function() {\n  if (this.right) return this.right.getMaxVal();\n  else return this.value;\n};\n \n \n \nvar bst = new BST(50);\n \nbst.insert(30);\nbst.insert(70);\nbst.insert(100);\nbst.insert(60);\nbst.insert(59);\nbst.insert(20);\nbst.insert(45);\nbst.insert(35);\nbst.insert(85);\nbst.insert(105);\nbst.insert(10);\n \nfunction log(node) {\n console.log(node.value);\n}\n \nbst.breadthFirstTraversal(log);",
      "diff": 1,
      "imp": 1,
      "cate": [
        "tree"
      ],
      "id": 36
    },
    {
      "subject": "algo",
      "title": "Queue implementation using linked list",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "\n// queue is initially empty\nvar Queue = {front: null, back: null};\n\n// we will use a node to keep track of the elements\n// in the queue which is represented by a linked list\nfunction Node(data, next) {\n  this.data = data;\n  this.next = next;\n} \n\n// add elements to queue in O(1) time\nfunction Enqueue(element) {\n  var N = new Node(element, null);\n  if (Queue.back === null) {\n    Queue.front = N;\n    Queue.back = N; \n  } else { \n    Queue.back.next = N; \n    Queue.back = Queue.back.next;\n  } \n}\n\n// remove first element from queue in O(1) time\nfunction Dequeue() {\n  if (Queue.front !== null) { \n    var first = Queue.front;\n    Queue.front = Queue.front.next; \n    return first.data;\n  } else {\n    if (Queue.back !== null) { Queue.back = null; }\n    return 'Cannot dequeue because queue is empty';\n  }\n}\n\nEnqueue('a'); \nEnqueue('b'); \nEnqueue('c');\n\n\nconsole.log(\"Queue ::\", Queue)",
      "diff": 1,
      "imp": 1,
      "cate": [
        "queueStack",
        "linked-list"
      ],
      "id": 37
    },
    {
      "subject": "algo",
      "title": "Maximum room required",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "function maxRoom(A){\n         console.log(\"*** A ::\", A);\n         const dt = A.sort((a, b) => {\n             return a[0] - b[0]\n         });\n         console.log(\"### sorted A ::\", dt);\n         let another = [dt[0]]\n         let tot = 1;\n        for(let i=1, l=dt.length; i<l; i++){\n            let last = another[another.length - 1];\n            let current = dt[i];\n\n            if(current[0] <= last[1]){\n                //tot = tot + 1;\n                //another.push(current);\n                last[1] = Math.max(last[1], current[1]);\n            } else {\n                another.push(current);\n            }\n\n        }\n\n        return another;\n\n\t}\n\n\nlet test1 = [\n  [1, 18],\n  [18, 23],\n  [15, 29],\n  [4, 15],\n  [2, 11],\n  [5, 13]\n]\n\nlet test2 = [ [0, 30],\n            [5, 10],\n            [15, 20]\n         ];\nconsole.log(maxRoom(test1));",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr",
        "sort"
      ],
      "id": 38
    },
    {
      "subject": "algo",
      "title": "Crop String message",
      "ques": "Write a method(CropMessage) that will accept two arguments i.e. string message and size to be cropped. The final method will return a string in such a way that none of the words will be partially cropped",
      "links": [],
      "tags": [
        {
          "name": "Toptal"
        }
      ],
      "ans": "/*\n CropMessage(\"Hello World\", 8) ==> \"Hello\"\n CropMessage(\"Hello World\", 11) ===> \"Hello World\"\n*/\n\n\nfunction cropMessage(message, K) {\n    // write your code in JavaScript (Node.js 8.9.4)\n    let croppedMessage = message.slice(0, K);\n    let lastChar = croppedMessage[croppedMessage.length - 1]\n    if(lastChar === \" \" || (message[croppedMessage.length] && message[croppedMessage.length] !== \" \") ){\n        let lastSpaceIndex = croppedMessage.lastIndexOf(\" \");\n        croppedMessage = croppedMessage.slice(0, lastSpaceIndex);\n    }\n\n    return croppedMessage;\n}\n\nconsole.log(cropMessage(\"Hello World\", 10))",
      "diff": 1,
      "imp": 1,
      "cate": [
        "str"
      ],
      "id": 39
    },
    {
      "subject": "algo",
      "title": "Minimum no. of cars",
      "ques": "Write a method that accepts two arguments - totalSeatRequired and array of the car with no. of seats. It will return minimum no. of cars needed to accommodate all seats",
      "links": [],
      "tags": [
        {
          "name": "Toptal"
        }
      ],
      "ans": "/*\n  getMinSeats(6, [1,5,1]). ==> 2\n*/\n\nfunction solution2(P, S) {\n    // write your code in JavaScript (Node.js 8.9.4)\n    function maxValue(arr){\n        return arr.reduce((max, val) => max > val ? max : val);\n    }\n\n    let totalSeatRequired = P.reduce((s, p) => { return p+s;}, 0);\n    let minCarNeeded = 0;\n    while(totalSeatRequired > 0){\n        let max = maxValue(S);\n        let maxIdx = S.indexOf(max);\n        minCarNeeded += 1;\n        totalSeatRequired -= max;\n        S.splice(maxIdx, 1);\n    }\n    return minCarNeeded;\n}\n\nconsole.log(solution2([1,4,1], [1,5,1]))",
      "diff": 1,
      "imp": 1,
      "cate": [
        "greed"
      ],
      "id": 40
    },
    {
      "subject": "algo",
      "title": "Minimum no of chimney filter",
      "ques": "There is an array containing the amount of pollution released from each factory. Installing a filter will reduce the pollution by 50%. what will be minimum no. of filters required to reduce overall pollution by half",
      "links": [],
      "tags": [
        {
          "name": "Toptal"
        }
      ],
      "ans": "/*\n    getMinFilters([5, 19, 8, 1]) ===> 3\n*/\n\nfunction getMinFilters(A) {\n    function findMax(ar){\n        let max = 0, idx = 0;\n        for(let i=0; i<ar.length;i++){\n            if(ar[i]>max){\n                max=ar[i];\n                idx = i;\n            }\n        }\n        return {\"v\" : max, \"idx\": idx}\n    }\n    let totalPollution = A.reduce((s, p) => { return p+s;}, 0);\n    let minPoll = totalPollution / 2;\n    let minFilter = 0;\n\n    while(totalPollution > minPoll){\n        let maxResult = findMax(A);\n        console.log(\"maxResult ::\", maxResult);\n        A.splice(maxResult.idx, 1, ((maxResult.v)/2));\n        minFilter += 1;\n        totalPollution -= (maxResult.v)/2\n    }\n    return minFilter;\n}\n\nconsole.log(getMinFilters([5, 19, 8, 1]));",
      "diff": 1,
      "imp": 1,
      "cate": [
        "greed"
      ],
      "id": 41
    },
    {
      "subject": "algo",
      "title": "Flatten a JSON object",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "General"
        },
        {
          "name": "Goldman sachs"
        }
      ],
      "ans": "//object 1\nvar d1 = {\n    name: 'test',\n    ar: [1,2, [3,4,[5,6, [7]]]],\n    config: { },\n    prev: { name: 'test1.1',\n        config: { },\n        prev: {\n            name: 'test1.1.1',\n            config: {  },\n            prev: { name: 'test1.1.1.1', config: { }, prev: undefined }\n        }\n    }\n};\n\nvar d2 = [1,2, [3,4,[5,6, [7]]]]\n\nfunction flattenObj(ob){\n    let finalObj = [];\n    let extractValue = (obj) => {\n        for(let p in obj){\n            if(typeof(obj[p]) == \"object\"){ // both array & object\n                extractValue(obj[p]);\n            } else {\n                if(Array.isArray(obj)){\n                   finalObj.push(obj[p]);\n                } else{\n                    let _ob = {};\n                   _ob[p] = obj[p]; \n                   finalObj.push(_ob); \n                }\n            }\n        }\n       \n    }\n\n    extractValue(ob);\n    return finalObj;\n}\n\nflattenObj(d1);",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr",
        "obj"
      ],
      "id": 42
    },
    {
      "subject": "algo",
      "title": "Check if no. is prime",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "const isPrime = num => {\n    for(let i = 2, s = Math.sqrt(num); i <= s; i++)\n        if(num % i === 0) return false; \n    return num > 1;\n}\n\nisPrime(11)",
      "diff": 1,
      "imp": 1,
      "cate": [
        "numbers"
      ],
      "id": 43
    },
    {
      "subject": "algo",
      "title": "Possible denominaions",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "Toptal"
        }
      ],
      "ans": "// 1c, 5c, 10c, 25c, 50c, and $1\n\n\nconst getChange = (M, P) => {\n    const denominations = [1, 5, 10, 25, 50]; \n\n    let changeAmount = (M-P).toFixed(2).split(\".\");\n    //console.log(\"changeAmount ::\", changeAmount);\n    const dollarAmt = Number(changeAmount[0]);\n    const centAmt = Number(changeAmount[1]);\n\n    console.log(\"dollarAmt :: centAmt ::\", dollarAmt, \"::\",centAmt);\n    \n    let finalalDeno = [];\n    let centLeft = centAmt;\n\n//***************************************************\n\n\n    let idx = 4;\n    while(idx >= 0){\n       let deno = denominations[idx]\n       if(deno <= centLeft && centLeft > 0){\n            let qty = Math.floor(centLeft/deno);\n            centLeft = centLeft - (deno * qty);\n            finalalDeno.unshift(qty);\n       } else {\n            finalalDeno.unshift(0); \n       }\n       idx = idx - 1;\n    }\n\n\n//********************* OR ***********************\n\n\n//     for(let i=(denominations.length - 1); i >= 0; i--){\n//             let deno = denominations[i]\n//            if(deno <= centLeft && centLeft > 0){\n//                 let qty = Math.floor(centLeft/deno);\n//                 centLeft = centLeft - (deno * qty);\n//                 finalalDeno.unshift(qty);\n//            } else {\n//                 finalalDeno.unshift(0); \n//            }\n//     }\n\n\n//***************************************************\n\n    finalalDeno.push(dollarAmt)\n    console.log(\"*** finalalDeno *** ::\", finalalDeno);\n}\n\ngetChange(5, 0.99) // should return [1,0,0,0,0,4]\ngetChange(3.14, 1.99) // should return [0,1,1,0,0,1]\ngetChange(3, 0.01) // should return [4,0,2,1,1,2]\ngetChange(4, 3.14) // should return [1,0,1,1,1,0]\ngetChange(0.45, 0.34) // should return [1,0,1,0,0,0]",
      "diff": 1,
      "imp": 1,
      "cate": [
        "greed"
      ],
      "id": 44
    },
    {
      "subject": "algo",
      "title": "Given a number, find its corresponding Roman numeral",
      "ques": "Converting Decimal Number lying between 1 to 3999 to Roman Numerals",
      "links": [
        {
          "name": "https://www.geeksforgeeks.org/converting-decimal-number-lying-between-1-to-3999-to-roman-numerals/"
        }
      ],
      "tags": [
        {
          "name": "Oracle"
        }
      ],
      "ans": "/*\nint num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\nstring sym[] = {\"I\",\"IV\",\"V\",\"IX\",\"X\",\"XL\",\"L\",\"XC\",\"C\",\"CD\",\"D\",\"CM\",\"M\"};\n*/",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr",
        "obj"
      ],
      "id": 45
    },
    {
      "subject": "algo",
      "title": "Trapping Rain Water between Towers Problem",
      "ques": "We have an array where each element represents height of a tower. If it starts raining, what is the amount of water that can be collected between the towers? Assumption is that the width of every tower is 1.",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=KV-Eq3wYjxI&ab_channel=IDeserve"
        },
        {
          "name": "https://leetcode.com/problems/trapping-rain-water/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Oracle"
        },
        {
          "name": "Leetcode"
        }
      ],
      "ans": "/*\n[1,5,2,3,1,7,2] – then answer is 11 units.\n*/",
      "diff": 5,
      "imp": 1,
      "cate": [
        "arr"
      ],
      "id": 46
    },
    {
      "subject": "algo",
      "title": "Buildings With an Ocean View",
      "ques": "There are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.\n\nThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.\n\nReturn a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.",
      "links": [
        {
          "name": "https://leetcode.com/problems/buildings-with-an-ocean-view"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        },
        {
          "name": "Microsoft"
        }
      ],
      "ans": "/*\nExample 1:\n\nInput: heights = [4,2,3,1]\nOutput: [0,2,3]\nExplanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.\nExample 2:\n\nInput: heights = [4,3,2,1]\nOutput: [0,1,2,3]\nExplanation: All the buildings have an ocean view.\nExample 3:\n\nInput: heights = [1,3,2,4]\nOutput: [3]\nExplanation: Only building 3 has an ocean view.\n*/\n\nvar findBuildings = function(heights) {    \n    if(heights.length == 0) return [];\n    \n    let buildingIdx = [];\n    let maxSoFar = 0;\n    for(let i= (heights.length - 1); i >=0; i--){\n        if(heights[i] > maxSoFar) {\n            buildingIdx.push(i)\n            maxSoFar = heights[i];\n        };\n    }\n    \n    return buildingIdx.reverse();\n};",
      "diff": 3,
      "imp": 3,
      "cate": [
        "arr",
        "queueStack"
      ],
      "id": 47
    },
    {
      "subject": "algo",
      "title": " Minimum Add to Make Parentheses Valid",
      "ques": "A parentheses string is valid if and only if:\n\nIt is the empty string,\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\n\nFor example, if s = \"()))\", you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\".\nReturn the minimum number of moves required to make s valid.",
      "links": [
        {
          "name": "https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/"
        }
      ],
      "tags": [
        {
          "name": "Microsoft"
        },
        {
          "name": "Leetcode"
        }
      ],
      "ans": "/*\nExample 1:\n\nInput: s = \"())\"\nOutput: 1\nExample 2:\n\nInput: s = \"(((\"\nOutput: 3\n*/\n\nvar minAddToMakeValid = function(s) {\n   let open = 0, close = 0;\n   for(let i=0; i<s.length; i++){\n       if(s[i] == \"(\"){\n          open = open + 1;\n        } else {\n            if(open > 0){\n                open = open - 1;\n            } else {\n                close = close + 1;\n            } \n        }\n   }\n    \n   return open + close;\n};",
      "diff": 3,
      "imp": 3,
      "cate": [
        "str",
        "greed",
        "queueStack"
      ],
      "id": 48
    },
    {
      "subject": "algo",
      "title": "Single linked list - basics (ES6) :",
      "ques": "",
      "links": [
        {
          "name": "https://medium.com/swlh/singly-linked-list-in-javascript-a0e58d045561"
        },
        {
          "name": "https://codeburst.io/linked-lists-in-javascript-es6-code-part-1-6dd349c3dcc3"
        }
      ],
      "tags": [
        {
          "name": "General"
        }
      ],
      "ans": "\nclass LinkedList{\n\n  constructor(d){\n    this.data = d;\n    this.next = null\n  }\n\n  add(d){\n    let head = this;\n    while(head.next){\n      head = head.next;\n    }\n    head.next = new LinkedList(d);\n  }\n\n  remove(idx){\n    if(!idx){\n      let head = this.next;\n      this.data = head.data;\n      this.next = head.next;\n    } \n\n    if(idx){\n      let i=0;\n      let head = this;\n      while(i < (idx-1) && head.next){\n        head = head.next;\n        i = i + 1;\n      }\n\n      if(head && head.next){\n        if(idx > 0 ){\n          head.next = head.next.next; \n        } else{\n          head.next = head.next;\n        }\n      }\n            \n    }\n    \n  }\n\n  traverse(){\n    let idx = 0;\n    let head = this;\n    while(head.next){\n      console.log(idx +\" : \"+head.data);\n      head = head.next;\n      idx = idx + 1;\n    }\n    console.log(idx +\" : \"+head.data);\n  }\n}\n\nlet ll = new LinkedList(1);\nll.add(2);\nll.add(3);\nll.add(4);\nll.add(5);\nll.add(6);\n\n// ll.remove();\n// ll.remove();\nll.remove(2);\n\nll.traverse();\nconsole.log(ll);",
      "diff": 1,
      "imp": 1,
      "cate": [
        "linked-list"
      ],
      "id": 49
    },
    {
      "subject": "algo",
      "title": "Minimum Deletions to Make Character Frequencies Unique",
      "ques": "A string s is called good if there are no two different characters in s that have the same frequency.\n\nGiven a string s, return the minimum number of characters you need to delete to make s good.\n\nThe frequency of a character in a string is the number of times it appears in the string. For example, in the string \"aab\", the frequency of 'a' is 2, while the frequency of 'b' is 1.",
      "links": [
        {
          "name": "https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/submissions/"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        },
        {
          "name": "Microsoft"
        }
      ],
      "ans": "/*\nExample 1:\n\nInput: s = \"aab\"\nOutput: 0\nExplanation: s is already good.\nExample 2:\n\nInput: s = \"aaabbbcc\"\nOutput: 2\nExplanation: You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".\nExample 3:\n\nInput: s = \"ceabaacb\"\nOutput: 2\nExplanation: You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n*/\n\n\nvar minDeletions = function(s) {\n    console.log(\"s ::\", s); \n    let sMap = {};\n    for(let i=0; i<s.length; i++){\n        sMap[s[i]] = (s[i] in sMap) ? sMap[s[i]] + 1 :  1;\n    }\n    console.log(\"sMap ::\", sMap); \n    \n   let fMap = {}; \n   let count = 0;\n    \n   const recurse = () => {\n        let fMap = {};\n         for(let key in sMap){\n              let f = sMap[key];\n              if((f in fMap)){\n                  count = count + 1;\n                  if(sMap[key] > 1){\n                     sMap[key] = sMap[key] - 1;\n                  }else {\n                      delete sMap[key];\n                  }\n                  recurse();\n                  break;\n              } else {\n                  fMap[f] = 1;\n              }\n         }  \n   }\n   \n    \n  recurse();\n  return count;\n    \n};\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "str",
        "sort"
      ],
      "id": 50
    },
    {
      "subject": "algo",
      "title": "1304. Find N Unique Integers Sum up to Zero",
      "ques": "Given an integer n, return any array containing n unique integers such that they add up to 0.",
      "links": [
        {
          "name": "https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/"
        }
      ],
      "tags": [
        {
          "name": "Microsoft"
        },
        {
          "name": "Leetcode"
        }
      ],
      "ans": "/*\nExample 1:\n\nInput: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].\nExample 2:\n\nInput: n = 3\nOutput: [-1,0,1]\nExample 3:\n\nInput: n = 1\nOutput: [0]\n \n*/\n\nvar sumZero = function(n) {\n    let a = [];\n\n     a.push((n % 2 == 0) ? -1 : 0); \n    \n    for(let i=1; i<n; i++){\n        a.push((a[i-1] < 0 ) ? (-(a[i-1])) : -(a[i-1] + 1));\n    }\n    \n    return a;\n};",
      "diff": 1,
      "imp": 1,
      "cate": [
        "arr"
      ],
      "id": 51
    },
    {
      "subject": "algo",
      "title": " Median of Two Sorted Arrays",
      "ques": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n",
      "links": [
        {
          "name": "https://leetcode.com/problems/median-of-two-sorted-arrays/"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "/*\nExample 1:\n\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\nExample 2:\n\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n*/\n\n/**\n * @param {number[]} nums1\n * @param {number[]} nums2\n * @return {number}\n */\nvar findMedianSortedArrays = function(nums1, nums2) {\n    console.log(\"nums1, nums2 ::\", nums1, \"::\",nums2);\n    let nums = [];\n    let idx1 = 0, idx2 = 0;\n    \n  while(idx1 < nums1.length || idx2 < nums2.length){\n        if(nums1[idx1] != undefined && nums2[idx2] == undefined){\n           nums.push(nums1[idx1]);\n           idx1 = idx1 + 1; \n        }\n        \n        if(nums1[idx1] == undefined && nums2[idx2] != undefined){\n           nums.push(nums2[idx2]);\n           idx2 = idx2 + 1; \n        }\n        \n        if(nums1[idx1] != undefined && nums2[idx2] != undefined){\n           if(nums1[idx1] < nums2[idx2]){\n              nums.push(nums1[idx1]);\n              idx1 = idx1 + 1; \n           } else {\n              nums.push(nums2[idx2]);\n              idx2 = idx2 + 1;  \n           }\n        }   \n    }\n    \n    console.log(\"nums ::\", nums);\n    \n    if(nums.length % 2 == 0){\n       let idx = nums.length/2;\n       return (nums[idx-1] + nums[idx])/2; \n    } else {\n        return nums[Math.floor(nums.length/2)];\n    }\n};",
      "diff": 5,
      "imp": 4,
      "cate": [
        "arr",
        "search",
        "sort"
      ],
      "id": 52
    },
    {
      "subject": "algo",
      "title": "how convert json to flat array and flat array to json in javascript?",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "JS"
        }
      ],
      "ans": "To convert a JSON object to a flat array in JavaScript, you can use recursion to traverse the object and flatten it. Here's an example of how you can accomplish that:\n\n```javascript\nfunction flattenObject(obj) {\n  let result = [];\n\n  function flatten(obj, path = '') {\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let newPath = path ? `${path}.${key}` : key;\n        if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\n          flatten(obj[key], newPath);\n        } else {\n          result.push({ key: newPath, value: obj[key] });\n        }\n      }\n    }\n  }\n\n  flatten(obj);\n  return result;\n}\n\n// Example usage:\nconst jsonObject = {\n  name: 'John Doe',\n  age: 30,\n  address: {\n    street: '123 Main St',\n    city: 'New York',\n    country: 'USA'\n  }\n};\n\nconst flatArray = flattenObject(jsonObject);\nconsole.log(flatArray);\n```\n\nThe `flattenObject` function takes a JSON object as input and recursively traverses it. It checks if a property's value is an object (but not an array) and recursively calls `flatten` with the updated path. When it encounters a non-object property, it pushes an object with `key` and `value` properties representing the flattened key-value pair into the `result` array.\n\nTo convert a flat array back to a JSON object, you can iterate over the array and reconstruct the object structure using the keys. Here's an example:\n\n```javascript\nfunction unflattenArray(flatArray) {\n  let result = {};\n\n  flatArray.forEach(item => {\n    const keys = item.key.split('.');\n    let tempObj = result;\n\n    keys.forEach((key, index) => {\n      if (!tempObj.hasOwnProperty(key)) {\n        tempObj[key] = {};\n      }\n\n      if (index === keys.length - 1) {\n        tempObj[key] = item.value;\n      } else {\n        tempObj = tempObj[key];\n      }\n    });\n  });\n\n  return result;\n}\n\n// Example usage:\nconst flatArray = [\n  { key: 'name', value: 'John Doe' },\n  { key: 'age', value: 30 },\n  { key: 'address.street', value: '123 Main St' },\n  { key: 'address.city', value: 'New York' },\n  { key: 'address.country', value: 'USA' }\n];\n\nconst jsonObject = unflattenArray(flatArray);\nconsole.log(jsonObject);\n```\n\nThe `unflattenArray` function iterates over each item in the flat array. It splits the key by dot (.) to get the nested structure. It then reconstructs the object hierarchy by creating nested objects as needed and assigns the value to the final key.\n\nNote that the above examples assume a simple JSON object structure without circular references or complex data types. Adjustments may be necessary depending on your specific use case.",
      "diff": 1,
      "imp": 1,
      "cate": [
        "javascript"
      ],
      "id": 53
    },
    {
      "subject": "algo",
      "title": "How to create deep copy of json in javascript?",
      "ques": "",
      "links": [
        {
          "name": "https://stackblitz.com/edit/js-5yxqbh?file=index.js,index.html"
        }
      ],
      "tags": [
        {
          "name": "JS"
        }
      ],
      "ans": "To create a deep copy of an object in JavaScript, you can write a program from scratch using recursion to traverse the object and clone its properties and nested objects. Here's an example:\n\n```javascript\nfunction deepCopy(obj) {\n  if (obj === null || typeof obj !== 'object') {\n    return obj;\n  }\n\n  let clone = Array.isArray(obj) ? [] : {};\n\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      clone[key] = deepCopy(obj[key]);\n    }\n  }\n\n  return clone;\n}\n\n// Example usage:\nconst originalObj = {\n  name: 'John Doe',\n  age: 30,\n  address: {\n    street: '123 Main St',\n    city: 'New York',\n    country: 'USA'\n  },\n  hobbies: ['reading', 'gaming']\n};\n\nconst copiedObj = deepCopy(originalObj);\nconsole.log(copiedObj);\n```\n\nIn the `deepCopy` function, we check if the input `obj` is null or not an object. If it's not an object (e.g., a primitive value), we return it as is. If it's an object, we create a new empty object (`clone`) or an empty array based on the original object's type.\n\nWe then iterate over the properties of the original object using a `for...in` loop. For each property, we recursively call `deepCopy` on the value to clone any nested objects or arrays.\n\nBy using recursion, the `deepCopy` function ensures that all levels of the object are cloned, resulting in a new object that is a deep copy of the original object.\n\nNote that this implementation assumes a simple object structure without circular references or complex data types. Adjustments may be necessary depending on your specific use case. Additionally, this implementation does not preserve any non-enumerable properties or prototype chains associated with the original object.",
      "diff": 1,
      "imp": 1,
      "cate": [
        "javascript"
      ],
      "id": 54
    },
    {
      "subject": "algo",
      "title": "700. Search in a Binary Search Tree",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/search-in-a-binary-search-tree/description/"
        }
      ],
      "tags": [],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 55
    },
    {
      "subject": "algo",
      "title": "42. Trapping Rain Water",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/trapping-rain-water/description/"
        }
      ],
      "tags": [],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 56
    },
    {
      "subject": "algo",
      "title": "2096. Step-By-Step Directions From a Binary Tree Node to Another",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another"
        }
      ],
      "tags": [],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 57
    },
    {
      "subject": "algo",
      "title": "Integer to Roman",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/integer-to-roman/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 58
    },
    {
      "subject": "algo",
      "title": "Swap Nodes in Pairs",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/swap-nodes-in-pairs/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 59
    },
    {
      "subject": "algo",
      "title": "Linked List Cycle",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/linked-list-cycle/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 60
    },
    {
      "subject": "algo",
      "title": "Reverse Linked List",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/reverse-linked-list/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 61
    },
    {
      "subject": "algo",
      "title": "Reverse String",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/reverse-string/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 62
    },
    {
      "subject": "algo",
      "title": "415. Add Strings",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/add-strings/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 63
    },
    {
      "subject": "algo",
      "title": "700. Search in a Binary Search Tree",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/search-in-a-binary-search-tree/?envType=list&envId=9sk6s9xj"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 64
    },
    {
      "subject": "algo",
      "title": "202. Happy Number",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/happy-number/?envType=list&envId=emyyi7m2"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 65
    },
    {
      "subject": "algo",
      "title": "700. Search in a Binary Search Tree",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/search-in-a-binary-search-tree/?envType=list&envId=emyyi7m2"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 66
    },
    {
      "subject": "algo",
      "title": "1. Two Sum",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/two-sum/?envType=list&envId=emyyi7m2"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 67
    },
    {
      "subject": "algo",
      "title": "319. Bulb Switcher",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/bulb-switcher/?envType=list&envId=rosqqj7g"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 68
    },
    {
      "subject": "algo",
      "title": "5. Longest Palindromic Substring",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/longest-palindromic-substring/?envType=list&envId=rozod5s3"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 69
    },
    {
      "subject": "algo",
      "title": "22. Generate Parentheses",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/generate-parentheses/?envType=list&envId=rozod5s3"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 70
    },
    {
      "subject": "algo",
      "title": "53. Maximum Subarray",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/maximum-subarray/?envType=list&envId=rozod5s3"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 71
    },
    {
      "subject": "algo",
      "title": "64. Minimum Path Sum",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/minimum-path-sum/?envType=list&envId=rozod5s3"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 72
    },
    {
      "subject": "algo",
      "title": "91. Decode Ways",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/decode-ways/?envType=list&envId=rozod5s3"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 73
    },
    {
      "subject": "algo",
      "title": "Letter Combinations of a Phone Number",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/letter-combinations-of-a-phone-number/?envType=list&envId=od6fto9i"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 74
    },
    {
      "subject": "algo",
      "title": "41. First Missing Positive",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/first-missing-positive/?envType=list&envId=or4pmjl5"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 75
    },
    {
      "subject": "algo",
      "title": "198. House Robber",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/house-robber/?envType=list&envId=evmfrfbe"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 76
    },
    {
      "subject": "algo",
      "title": "746. Min Cost Climbing Stairs",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/min-cost-climbing-stairs/?envType=list&envId=evmfrfbe"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 77
    }
  ],
  "js": [
    {
      "subject": "js",
      "title": "Throttling and Debouncing in JavaScript",
      "ques": "",
      "links": [
        {
          "name": "https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf"
        },
        {
          "name": "https://stackblitz.com/edit/js-justrw?file=index.js"
        }
      ],
      "tags": [
        {
          "name": "Debouncing and Throttling"
        }
      ],
      "ans": "\n-> Throttling and debouncing give us control over the rate at which a function is called. \n\n-> They are especially useful when we are dealing with event handler assignments. There are scenarios where we may invoke functions when it isn’t necessary.\n\n\n\n==\n\n\n<input type=\"text\" id=\"search\" placeholder=\"search ..\"> <br/> <br/> <br/>\n<input type=\"text\" id=\"dsearch\" placeholder=\"Debounce Search ..\"> <br/> <br/> <br/>\n<input type=\"text\" id=\"tsearch\" placeholder=\"Throttle Search ..\">\n\n--------\n\nconst fn1 = (e) => { console.log(e.target.value); };\n\nconst debounce = (consFn, delay) => {\n  let timeout;\n  \n  return function(){\n    let context = this;\n    let args = arguments;\n    \n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      consFn.apply(context, args);\n    }, delay);\n  }\n}\n\nconst throttle = (consFn, delay) => {\n  let inThrottle = true;\n  \n  return function(){\n    let context = this;\n    let args = arguments;\n    \n    if(inThrottle){\n      consFn.apply(context, args);\n      inThrottle = false;\n      setTimeout(() => {\n        inThrottle = true;\n      }, delay)\n    }\n  }\n}\n\ndocument.querySelector(\"#search\").addEventListener(\"keyup\", fn1);\n\ndocument.querySelector(\"#dsearch\").addEventListener(\"keyup\", debounce(fn1, 1000));\n\ndocument.querySelector(\"#tsearch\").addEventListener(\"keyup\", throttle(fn1, 1000));\n",
      "diff": 4,
      "imp": 4,
      "cate": [
        "Events"
      ],
      "id": 1
    },
    {
      "subject": "js",
      "title": "JS: Basics and Tricky Questions",
      "ques": "",
      "links": [
        {
          "name": "http://www.thatjsdude.com/interview/js2.html#nullVsUndefined"
        }
      ],
      "tags": [
        {
          "name": "Basics & Tricky"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": [
        "General"
      ],
      "id": 2
    },
    {
      "subject": "js",
      "title": "Practical Uses for Closures",
      "ques": "",
      "links": [
        {
          "name": "https://medium.com/@dis_is_patrick/practical-uses-for-closures-c65640ae7304#.fva9ii8od"
        },
        {
          "name": "https://www.youtube.com/watch?v=-xqJo5VRP4A&ab_channel=techsith"
        }
      ],
      "tags": [
        {
          "name": "closures"
        }
      ],
      "ans": "function pam() {\n    var name = \"Pam Beesly\";\n    function displayName() {\n        alert (name);\n    }\n    displayName(); \n}\npam();\n",
      "diff": 3,
      "imp": 4,
      "cate": [
        "general"
      ],
      "id": 3
    },
    {
      "subject": "js",
      "title": "JavaScript scope",
      "ques": "Everything you wanted to know about JavaScript scope",
      "links": [
        {
          "name": "https://ultimatecourses.com/blog/everything-you-wanted-to-know-about-javascript-scope"
        }
      ],
      "tags": [
        {
          "name": "scoping"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 3,
      "cate": [
        "general"
      ],
      "id": 4
    },
    {
      "subject": "js",
      "title": "javaScript promises",
      "ques": "",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=s6SH72uAn3Q#t=6.819927&ab_channel=techsith"
        },
        {
          "name": "https://www.youtube.com/watch?v=104J7_HyaG4&ab_channel=DecypherMedia"
        },
        {
          "name": "https://stackblitz.com/edit/js-k4zgov?file=index.js,index.html"
        }
      ],
      "tags": [
        {
          "name": "Promises"
        }
      ],
      "ans": "\nlet p1 = new Promise((resolve, reject) => {\n  // do async operation then resolve or reject\n  resolve(\"Wake Up\");\n});\n\nlet p2 = new Promise((resolve, reject) => {\n  resolve(\"office\");\n});\n\nlet p3 = new Promise((resolve, reject) => {\n  resolve(\"Sleep\");\n});\n\n\n// p1.then((result) => {\n//   console.log(\"p1 finshed :: result ::\", result);\n//   return p2;\n// }).then((result) => {\n//   console.log(\"p2 finshed :: result ::\", result);\n//   return p3;\n// }).then((result) => {\n//   console.log(\"p3 finshed :: result ::\", result);\n// });\n\n\nlet P1 = function(){\n  return new Promise((resolve, reject) => {\n    // do async operation then resolve or reject\n    resolve(\"Wake Up\");\n  });\n}\n\nlet P2 = function(res){\n  return new Promise((resolve, reject) => {\n    res ? resolve([res, \"Office\"]) : resolve(\"Office\");\n  });\n}\n\nlet P3 = function(res){\n  return new Promise((resolve, reject) => {\n    res ? resolve([...res, ...[\"Sleep\"]]) : resolve(\"Sleep\");\n  });\n}\n\nP1().then((result) => {\n  console.log(\"***P1 finshed :: result ::\", result);\n  return P2(result);\n}).then((result) => {\n  console.log(\"***P2 finshed :: result ::\", result);\n  return P3(result)\n}).then((result) => {\n  console.log(\"***P3 finshed :: result ::\", result);\n});\n\nPromise.all([P1(), P2(), P3()]).then((result) => {\n  console.log(\"Finsished all :: result ::\", result);\n});\n\nPromise.race([P1(), P2(), P3()]).then((result) => {\n  console.log(\"promise race - Finsished once :: result ::\", result);\n});\n\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general",
        "Async"
      ],
      "id": 5
    },
    {
      "subject": "js",
      "title": "How new operator works ?",
      "ques": "",
      "links": [
        {
          "name": "https://ianbicking.org/blog/2013/04/new-considered-harmful.html"
        },
        {
          "name": "https://www.liip.ch/en/blog/why-i-dont-use-the-javascript-new-keyword"
        }
      ],
      "tags": [
        {
          "name": "New operator"
        }
      ],
      "ans": "\nfunction new_(constructor /* plus a variable number of arguments */) {\n  var newObject = Object.create(constructor.prototype);\n  // This gets the varargs after `constructor`:\n  var restArgs = Array.prototype.slice.call(arguments, 1);\n  var result = constructor.apply(newObject, restArgs);\n  if (typeof result == \"object\") {\n    // If the function returns something, ignore newObject\n    return result;\n  }\n  return newObject;\n}",
      "diff": 1,
      "imp": 3,
      "cate": [
        "general"
      ],
      "id": 6
    },
    {
      "subject": "js",
      "title": "Shadow Dom in HTML Introduction tutorial",
      "ques": "",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=SDs4xmMcVS4&ab_channel=techsith"
        },
        {
          "name": "https://css-tricks.com/modular-future-web-components/"
        }
      ],
      "tags": [
        {
          "name": "Shadow DOM"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general",
        "DOM"
      ],
      "id": 7
    },
    {
      "subject": "js",
      "title": "What is Functional Programming?",
      "ques": "",
      "links": [
        {
          "name": "https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0"
        }
      ],
      "tags": [
        {
          "name": "Functional Programming"
        }
      ],
      "ans": "Functional programming favors:\n\na. Pure functions instead of shared state & side effects\nb. Immutability over mutable data\nc. Function composition over imperative flow control\nd. Lots of generic, reusable utilities that use higher order functions to act on many data types instead of methods that only operate on their colocated data\ne. Declarative rather than imperative code (what to do, rather than how to do it)\nf. Expressions over statements\ng. Containers & higher order functions over ad-hoc polymorphism",
      "diff": 1,
      "imp": 3,
      "cate": [
        "general",
        "Code Pattern"
      ],
      "id": 8
    },
    {
      "subject": "js",
      "title": "Js Eventloop",
      "ques": "",
      "links": [
        {
          "name": "https://blog.carbonfive.com/the-javascript-event-loop-explained/"
        },
        {
          "name": "https://www.youtube.com/watch?v=8aGhZQkoFbQ&ab_channel=JSConf"
        }
      ],
      "tags": [
        {
          "name": "Eventloop"
        }
      ],
      "ans": "// callstack try to finish all exec then async process(cb part) is taking into consideration\nconsole.log(1);\nconsole.log(2)\n\nsetTimeout(() => {\n  console.log(3);  \n});\n\nconsole.log(4);\n\nsetTimeout(() => {\n  console.log(5)  \n});\n\nconsole.log(6);\nconsole.log(7);\nconsole.log(8);\n\n// output \neventLoop:2 1\neventLoop:3 2\neventLoop:9 4\neventLoop:15 6\neventLoop:16 7\neventLoop:17 8\n\neventLoop:6 3\neventLoop:12 5",
      "diff": 1,
      "imp": 4,
      "cate": [
        "general",
        "async"
      ],
      "id": 9
    },
    {
      "subject": "js",
      "title": "JavaScript Design Patterns",
      "ques": "",
      "links": [
        {
          "name": "https://www.digitalocean.com/community/tutorial_series/javascript-design-patterns"
        }
      ],
      "tags": [],
      "ans": "a. Factory\nb. Constructor\nb. Moduular & Revealing modular\nd. prototype\ne. Observer design pattern\nf. pub/sub\ng. singleton",
      "diff": 1,
      "imp": 1,
      "cate": [
        "code_pattern"
      ],
      "id": 10
    },
    {
      "subject": "js",
      "title": "Javascript OOPs implementation",
      "ques": "",
      "links": [
        {
          "name": "https://www.educative.io/blog/object-oriented-programming"
        },
        {
          "name": "https://www.youtube.com/watch?v=S1dWe3f2zm0&ab_channel=Telusko"
        },
        {
          "name": "https://www.youtube.com/watch?v=vDJpGenyHaA&ab_channel=TraversyMedia"
        },
        {
          "name": "https://www.youtube.com/watch?v=PFmuCDHHpwk&ab_channel=ProgrammingwithMosh"
        },
        {
          "name": "https://stackblitz.com/edit/js-ezmjoz?file=index.js"
        }
      ],
      "tags": [
        {
          "name": "OOPs"
        }
      ],
      "ans": "Certainly! Here's a detailed explanation of Object-Oriented Programming (OOP) concepts in JavaScript using ES6 features:\n\n1. Objects and Classes:\n   - In ES6, classes were introduced as syntactic sugar over JavaScript's existing prototype-based inheritance system.\n   - Classes provide a more familiar syntax for defining objects and their behavior.\n   - The `class` keyword is used to define a class, and the `constructor` method is used to initialize the object.\n   - Here's an example of defining a class and creating objects from it:\n\n```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  sayHello() {\n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst john = new Person(\"John\", 25);\njohn.sayHello(); // Output: Hello, my name is John and I am 25 years old.\n```\n\n2. Encapsulation:\n   - Encapsulation refers to the bundling of data and methods within an object, hiding the internal details and providing a public interface for interaction.\n   - ES6 introduces support for `get` and `set` keywords to define getter and setter methods for object properties.\n   - Getters allow accessing a property's value, while setters allow modifying the property value with validation or additional logic.\n   - Here's an example:\n\n```javascript\nclass BankAccount {\n  constructor(accountNumber, balance) {\n    this._accountNumber = accountNumber;\n    this._balance = balance;\n  }\n\n  get accountNumber() {\n    return this._accountNumber;\n  }\n\n  get balance() {\n    return this._balance;\n  }\n\n  set balance(newBalance) {\n    if (newBalance >= 0) {\n      this._balance = newBalance;\n    } else {\n      console.log(\"Invalid balance.\");\n    }\n  }\n}\n\nconst account = new BankAccount(\"1234567890\", 1000);\nconsole.log(account.accountNumber); // Output: 1234567890\nconsole.log(account.balance); // Output: 1000\naccount.balance = -500; // Output: Invalid balance.\naccount.balance = 2000;\nconsole.log(account.balance); // Output: 2000\n```\n\n3. Inheritance:\n   - Inheritance allows objects to inherit properties and methods from other objects, creating a hierarchical relationship.\n   - ES6 introduced the `extends` keyword to establish inheritance between classes.\n   - The `super` keyword is used to invoke the parent class's constructor or methods.\n   - Here's an example of inheritance:\n\n```javascript\nclass Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  speak() {\n    console.log(`${this.name} makes a sound.`);\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(`${this.name} barks.`);\n  }\n}\n\nconst dog = new Dog(\"Buddy\");\ndog.speak(); // Output: Buddy barks.\n```\n\n4. Polymorphism:\n   - Polymorphism allows objects of different classes to be treated as objects of a common superclass, enabling interchangeable usage.\n   - JavaScript achieves polymorphism through dynamic typing and duck typing.\n   - Duck typing focuses on the object's behavior rather than its type.\n   - Here's an example:\n\n```javascript\nclass Shape {\n  area() {\n    console.log(\"Calculating area of a shape.\");\n  }\n}\n\nclass Circle extends Shape {\n  constructor(radius) {\n    super();\n    this.radius = radius;\n  }\n\n  area() {\n    console.log(`Calculating area of a circle with radius ${this.radius}`);\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(length, width) {\n   \n\n super();\n    this.length = length;\n    this.width = width;\n  }\n\n  area() {\n    console.log(`Calculating area of a rectangle with length ${this.length} and width ${this.width}`);\n  }\n}\n\nconst shapes = [new Circle(5), new Rectangle(4, 6)];\n\nshapes.forEach(shape => shape.area());\n// Output:\n// Calculating area of a circle with radius 5\n// Calculating area of a rectangle with length 4 and width 6\n```\n\nThese are some of the key Object-Oriented Programming concepts in JavaScript using ES6 features. Understanding and applying these concepts can help you write more modular, reusable, and maintainable code.",
      "diff": 1,
      "imp": 4,
      "cate": [
        "general",
        "oops"
      ],
      "id": 11
    },
    {
      "subject": "js",
      "title": "JS Promised",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "Promises"
        }
      ],
      "ans": "const getConfig1 = new Promise((resolve, reject) => {\n    let ser;\n    setTimeout(() => resolve(ser), 100)\n  });\n\n\nconst _f1 = () => {\n    const asyncPromise  = new Promise(async(resolve, reject) => {\n        try{\n           let data = await getConfig1;\n           resolve(data); \n        } catch(err){\n            reject(err);\n        }\n    });\n\n    return [asyncPromise];\n}\n\nconst f1 = () => {\n    const asyncPromise  = async() => {\n        try{\n           let data = 42; //await getConfig1;\n           return data; \n        } catch(err){\n            return err;\n        }\n    }\n    return [asyncPromise];\n}\n\nlet promises = _f1();\n\nPromise.all(promises).then((configPayloads)=>{\n    console.log(\"configPayloads ::\", configPayloads);\n}).catch((error)=>{\n    console.log(\"error ::\", error);\n})\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 12
    },
    {
      "subject": "js",
      "title": "Currying",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "Currying"
        },
        {
          "name": "Walmart"
        }
      ],
      "ans": "/*\nCase 1: add(1)(2)(3)\nIt’s basically a sequence of functions with single argument. \nSo our approach is to return a function which in turn returns another function to accept next argument.\n*/\nfunction add(a){\n return function(b){\n  return function(c){\n   return a+b+c\n  }\n }\n}\n\n\n/*\nCase 2: add(1)(2)(3)…(n)()\nIt’s basically a sequence of n+1 functions with single argument except the last one. \nSo our approach is to return a function which in turn returns another function to accept \nnext argument and so on till the last argument doesn’t exist.\n*/\nfunction add(a) {\n  return function(b){\n    if(b){\n      return add(a+b)\n    }\n    return a\n  }\n}\n\n//let res = add(1)(2)(3)(4)();\n//console.log(\"res ::\", res);\n\n\n/*\nCase 3: sum(1,2)(3,4)\nSo, this is similar as above just that we are accepting two arguments in single call. \nSo, we need to add the arguments. Let’s look at the code:\n*/\nfunction sum(a,b) {\n  return function(c,d){\n    return a+b+c+d\n  }\n}\n\n/*\nCase 4: add(1,2..n)(5,6…n)…(n)()\nNow in this case, everything is infinite. We already know infinite currying, let’s focus on infinite arguments.\n*/\nfunction add(...args) {\n  let a = args.reduce((a, b) => a + b, 0)\n  return function(...args){\n    let b = args.reduce((a, b) => a + b, 0)\n    if(b){\n      return add(a+b)\n    }\n    return a\n  }\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general",
        "code_pattern"
      ],
      "id": 13
    },
    {
      "subject": "js",
      "title": "Predict Output",
      "ques": "",
      "links": [
        {
          "name": "https://stackblitz.com/edit/js-qxha7g?file=index.html,index.js"
        }
      ],
      "tags": [
        {
          "name": "Basics & Tricky"
        }
      ],
      "ans": "1.what will be the output?\nvar a = 10;\n\nfunction t(){\n    this.a = 20;\n    return a;\n}\n\nconsole.log(new t())\n\nOptions :-\nA. 10\nB. 20\nC. {a : 20}\nD. undefined\n\nAnswer - C\n---------------------------------------------------\n\n2.what will be the output?\nconsole.log(a);\nconsole.log(b);\nvar a=1;\nconst b=2;\n\n\noptions :-\nA. ReferenceError: a is not defined, ReferenceError: b is not defined\nB. undefined, ReferenceError: b is not defined\nC. 1, 2\nD. ReferenceError: a is not defined, undefined\n\nAnswer - B\n---------------------------------------------------\n\n3.what will be the output?\nlet i;\nfor(i=0; i<5; i++){\n    setTimeout(()=>{\n        console.log(i);\n    });\n}\n\noptions :-\nA. 4, 4, 4, 4, 4\nB. 5, 5, 5, 5, 5\nC. undefined\nD. 0, 1, 2, 3, 4\n\nAnswer - B\n---------------------------------------------------\n\n4.what will be output?\nconst length = 4;\nconst numbers = [];\nfor (var i = 0; i < length; i++);{\n  numbers.push(i + 1);\n}\nnumbers;\n\n\noptions :-\nA.[5]\nB.[0,1,2,3]\nC.[1,2,3,4]\nD.[]\n\nAnswer - A\n---------------------------------------------------\n\n5.What will be output?\nfunction foo() {\n  let a = b = 0;\n  a++;\n  return a;\n}\nfoo();\nconsole.log(typeof a); \nconsole.log(typeof b);\n\noptions :-\nA. undefined, number\nB. number, number\nC. boolean, boolean\nD. number, undefined\n\nAnswer - A\n\n\n\n\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 14
    },
    {
      "subject": "js",
      "title": "Factory Function vs. Constructor vs. Class",
      "ques": "",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=fbuyliXlDGI&ab_channel=ColorCode"
        }
      ],
      "tags": [
        {
          "name": "Youtube"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general",
        "code_pattern"
      ],
      "id": 15
    },
    {
      "subject": "js",
      "title": "Implement Hashcode in Javascript",
      "ques": "",
      "links": [
        {
          "name": "https://stackoverflow.com/questions/194846/is-there-any-kind-of-hash-code-function-in-javascript"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "String.prototype.hashCode = function(){\n    var hash = 0;\n    for (var i = 0; i < this.length; i++) {\n        var character = this.charCodeAt(i);\n        hash = ((hash<<5)-hash)+character;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 16
    },
    {
      "subject": "js",
      "title": "Polyfill for Array methods: map(), filter() and reduce() ",
      "ques": "",
      "links": [
        {
          "name": "https://medium.com/nerd-for-tech/polyfill-for-array-map-filter-and-reduce-e3e637e0d73b"
        },
        {
          "name": "https://stackblitz.com/edit/js-ajcqxm?file=index.js"
        }
      ],
      "tags": [
        {
          "name": "medium.com"
        },
        {
          "name": "Adobe"
        }
      ],
      "ans": "//MAP\nlet newArray = arr.map(callback(currentValue[, index[, array]]) {\n  // return element for newArray, after executing something\n});\n\n\nArray.prototype.myMap = function(callbackFn) {\n  var arr = [];              \n  for (var i = 0; i < this.length; i++) { \n     /* call the callback function for every value of this array and       push the returned value into our resulting array\n     */\n    arr.push(callbackFn(this[i], i, this));\n  }\n  return arr;\n}\n\n\n\n//FILTER\nlet newArray = arr.filter(callback(currentValue[, index[, array]]) {\n  // return element for newArray, if true\n});\n\nArray.prototype.myFilter = function(callbackFn) {\n  var arr = [];     \n  for (var i = 0; i < this.length; i++) {\n    if (callbackFn.call(this, this[i], i, this)) {\n      arr.push(this[i]);\n    }\n  }\n  return arr;\n}\n\n//REDUCE\narr.reduce(callback( accumulator, currentValue, [, index[, array]] )[, initialValue])\n\nArray.prototype.myReduce= function(callbackFn, initialValue) {\n  var accumulator = initialValue;\nfor (var i = 0; i < this.length; i++) {\n    if (accumulator !== undefined) {\n      accumulator = callbackFn.call(undefined, accumulator, this[i],   i, this);\n    } else {\n      accumulator = this[i];\n    }\n  }\n  return accumulator;\n}\n\n\n\n\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 17
    },
    {
      "subject": "js",
      "title": "Web Components",
      "ques": "What is web components in Js?",
      "links": [
        {
          "name": "https://kinsta.com/blog/web-components/"
        }
      ],
      "tags": [
        {
          "name": "web componet"
        }
      ],
      "ans": "Certainly! Here's a detailed explanation of web component concepts in JavaScript with code examples:\n\n1. Custom Elements:\n   - Custom Elements allow you to define your own HTML elements with custom behaviors and functionality.\n   - Custom elements can encapsulate their own markup, style, and behavior, making them reusable and self-contained.\n   - To define a custom element, you need to extend the `HTMLElement` class and define the desired behavior.\n   - Here's an example of creating a custom `<my-button>` element:\n\n```javascript\nclass MyButton extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this.shadowRoot.innerHTML = `\n      <style>\n        button {\n          background-color: blue;\n          color: white;\n        }\n      </style>\n      <button>Click me</button>\n    `;\n  }\n\n  connectedCallback() {\n    this.shadowRoot.querySelector('button').addEventListener('click', () => {\n      console.log('Button clicked!');\n    });\n  }\n}\n\ncustomElements.define('my-button', MyButton);\n```\n\n2. Shadow DOM:\n   - Shadow DOM provides encapsulation by creating an isolated DOM subtree within a custom element.\n   - It separates the styles and DOM of the custom element from the surrounding page's styles and DOM.\n   - The Shadow DOM can be attached to a custom element using the `attachShadow()` method.\n   - Here's an example of using the Shadow DOM in a custom element:\n\n```javascript\nclass MyCard extends HTMLElement {\n  constructor() {\n    super();\n    const shadow = this.attachShadow({ mode: 'open' });\n    shadow.innerHTML = `\n      <style>\n        .card {\n          border: 1px solid gray;\n          padding: 10px;\n        }\n      </style>\n      <div class=\"card\">\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('my-card', MyCard);\n```\n\n3. HTML Templates:\n   - HTML Templates allow you to define reusable markup structures that can be cloned and used multiple times.\n   - Templates provide a way to define static markup without rendering it immediately.\n   - Templates can be used within custom elements or inserted dynamically in the document.\n   - Here's an example of using an HTML template within a custom element:\n\n```javascript\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    .my-alert {\n      background-color: yellow;\n      padding: 10px;\n      border: 1px solid black;\n    }\n  </style>\n  <div class=\"my-alert\">\n    <slot></slot>\n  </div>\n`;\n\nclass MyAlert extends HTMLElement {\n  constructor() {\n    super();\n    const shadow = this.attachShadow({ mode: 'open' });\n    shadow.appendChild(template.content.cloneNode(true));\n  }\n}\n\ncustomElements.define('my-alert', MyAlert);\n```\n\nThese examples demonstrate the core concepts of web components in JavaScript. Custom Elements, Shadow DOM, and HTML Templates allow you to create reusable and encapsulated components, providing modularity, encapsulation, and reusability in web development.",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 18
    },
    {
      "subject": "js",
      "title": "What are web APIs?",
      "ques": "",
      "links": [
        {
          "name": "https://developer.mozilla.org/en-US/docs/Web/API"
        }
      ],
      "tags": [
        {
          "name": "web API"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 19
    },
    {
      "subject": "js",
      "title": "What is the order of inline onclick vs addeventlistener and why?",
      "ques": "",
      "links": [
        {
          "name": "https://stackoverflow.com/questions/49805942/what-is-the-order-of-inline-onclick-vs-addeventlistener-and-why#:~:text=As%20we%20can%20see%20then,second%20listener%20set%20with%20addEventListener%20."
        },
        {
          "name": "https://jsbin.com/xubajoradi/edit?html,js,console,output"
        }
      ],
      "tags": [],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": [
        "events",
        "general"
      ],
      "id": 20
    },
    {
      "subject": "js",
      "title": "real time communication",
      "ques": "what are solution for real time communication between client and server?",
      "links": [
        {
          "name": "https://www.telerik.com/blogs/real-time-communication-techniques"
        },
        {
          "name": "https://eduardocribeiro.com/blog/real-time-communication/"
        }
      ],
      "tags": [
        {
          "name": "web API"
        }
      ],
      "ans": "There are several solutions available for real-time communication between client and server. Here are some commonly used options:\n\na. **WebSockets**: WebSockets provide full-duplex communication channels over a single TCP connection. They allow real-time, bidirectional communication between the client and server. WebSockets are widely supported by modern web browsers and offer low latency and efficient data transfer. Libraries like Socket.IO and SignalR simplify WebSocket implementation.\n\nb. **Server-Sent Events (SSE)**: SSE is a unidirectional communication protocol where the server sends data to the client over a persistent HTTP connection. SSE allows the server to push updates to the client as they occur, providing real-time updates. SSE is well-suited for scenarios where the client needs to receive continuous streams of data. It is supported by most modern web browsers.\n\nc. **Long Polling**: Long polling is a technique where the client sends a request to the server, and the server keeps the request open until new data is available. Once the server has new data, it responds to the request, and the client immediately sends another request. Long polling allows real-time updates while reducing the frequency of requests compared to regular polling. It works well in scenarios where WebSocket or SSE support is limited.\n\nd. **HTTP Streaming**: HTTP streaming allows the server to send data to the client continuously as it becomes available. The server sends an initial response and keeps the connection open, streaming data in chunks as it is generated. This approach enables real-time updates but may require more server resources compared to other options.\n\ne. **Push Notifications**: Push notifications are a mechanism to deliver real-time updates to clients through platform-specific notification services. They are commonly used in mobile applications to provide real-time alerts or messages. Push notification services like Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) can be utilized to achieve real-time communication.\n\nThe choice of the solution depends on the specific requirements of your application, the level of real-time responsiveness needed, and the limitations or constraints of your infrastructure. It's important to consider factors such as scalability, compatibility, ease of implementation, and the nature of the data being transmitted when selecting a real-time communication solution.\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 21
    },
    {
      "subject": "js",
      "title": "what is EventSource in Javascript?",
      "ques": "",
      "links": [
        {
          "name": "https://www.w3schools.com/html/html5_serversentevents.asp"
        },
        {
          "name": "https://blog.tericcabrel.com/implement-server-sent-event-in-node-js"
        }
      ],
      "tags": [],
      "ans": "In JavaScript, `EventSource` is an API that allows the client (typically a web browser) to establish a persistent connection to a server over HTTP and receive real-time updates in the form of server-sent events (SSE).\n\nThe `EventSource` API provides a simple and convenient way to consume SSE streams and handle server-sent events. It abstracts the underlying networking details and provides a high-level interface to work with SSE.\n\nHere are some key features and concepts related to `EventSource`:\n\n1. **Establishing a connection**: To establish a connection with the server, you create an instance of `EventSource` and provide the URL of the SSE endpoint as the argument.\n\n2. **Listening for events**: Once the connection is established, you can listen for different types of events sent by the server using event listeners. The common events include `message`, `open`, and `error`.\n\n3. **Message event**: The `message` event is triggered when the server sends an event. You can add an event listener for the `message` event and handle the received event data.\n\n4. **Event data**: The event data sent by the server typically includes fields like event type, data payload, and optional custom fields. You can access these fields using properties of the `Event` object provided in the event listener.\n\n5. **Reconnection and error handling**: The `EventSource` API automatically handles reconnection and error scenarios. If the connection is interrupted, it attempts to reconnect. When an error occurs, the `error` event is triggered, and you can handle the error appropriately.\n\nHere's a basic example demonstrating the usage of `EventSource`:\n\n```javascript\nconst eventSource = new EventSource('http://example.com/events');\n\neventSource.addEventListener('message', (event) => {\n  const eventData = JSON.parse(event.data);\n  console.log('Received event:', eventData);\n});\n\neventSource.addEventListener('open', () => {\n  console.log('Connection opened');\n});\n\neventSource.addEventListener('error', (error) => {\n  console.error('Error occurred:', error);\n});\n```\n\nIn this example, we create an `EventSource` instance and provide the URL of the SSE endpoint (`http://example.com/events`). We add event listeners for `message`, `open`, and `error` events to handle the received events, connection open, and error scenarios respectively.\n\nThe `EventSource` API simplifies the process of working with server-sent events and allows you to build real-time applications that can receive and handle continuous updates from the server.",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 22
    },
    {
      "subject": "js",
      "title": "How could you use Math.max to find the max value in an array?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "function getMax(arr){\n  return Math.max.apply(null, arr);  \n}",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 23
    },
    {
      "subject": "js",
      "title": "What the heck is this in JavaScript?",
      "ques": "",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=yuo8YqKDQ-M&ab_channel=ThatJSDude"
        }
      ],
      "tags": [],
      "ans": "At the time of execution of every function, JavaScript engine sets \na property to the function called this which refer to the current \nexecution context. this is always refer to an object and depends \non how function is called. \nThere are 7 different cases where the value of this varies :-\n\na. In the global context or inside a function this refers to the window object.\n\nb. Inside IIFE (immediate invoking function) if you use \"use strict\", value of this is undefined. To pass access window inside IIFE with \"use strict\", you have to pass this.\n\nc. While executing a function in the context of an object, the object becomes the value of this\n\nd. Inside a setTimeout function, the value of this is the window object.\n\ne. If you use a constructor (by using new keyword) to create an object, the value of this will refer to the newly created object.\n\nf. You can set the value of this to any arbitrary object by passing the object as the first parameter of bind, call or apply\n\ng. For dom event handler, value of this would be the element that fired the event",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 24
    },
    {
      "subject": "js",
      "title": "How could you implement moveLeft animation?",
      "ques": "",
      "links": [
        {
          "name": "https://stackblitz.com/edit/js-92mhcq?file=index.js,index.html"
        }
      ],
      "tags": [],
      "ans": "function moveDiv(margin, delay) {\n  // arrow function was creating issue with margin variable scoping so replaced with simple function\n  let clearMargin = setInterval(function(){\n    margin = margin + 10;\n    document.querySelector(\"#move\").style.cssText = `margin-left : ${margin}px;`; \n    if(margin == 100){\n      clearInterval(clearMargin);\n    }\n  }, delay)\n\n}\n\nmoveDiv(10, 1000);",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 25
    },
    {
      "subject": "js",
      "title": "Generate no between 5 and 8",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "min = 5\nmax = 8\n\nMath.floor(Math.random() *( (max - min) + 1) ) + min\n\nMath.floor(Math.random() *( (8 - 5) + 1) ) + 5\n\nMath.floor(Math.random() * 4) + 5",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 26
    },
    {
      "subject": "js",
      "title": "why fat arrow don't read this context when declare new method on Array prototype?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "The fat arrow (`=>`) function in JavaScript has lexical scoping for the `this` keyword. It means that the value of `this` inside a fat arrow function is determined by the surrounding context where the function is defined, and it does not have its own `this` binding.\n\nWhen you declare a new method on the Array prototype using a fat arrow function, the `this` inside that function will not refer to the array instance you are operating on. Instead, it will inherit the `this` value from the surrounding scope where the function is defined.\n\nHere's an example to illustrate this behavior:\n\n```javascript\nArray.prototype.myMethod = () => {\n  console.log(this); // 'this' will not refer to the array instance\n};\n\nconst myArray = [1, 2, 3];\nmyArray.myMethod(); // Output: undefined (referring to the surrounding scope)\n```\n\nIn this example, the `myMethod` is declared using a fat arrow function. When calling `myArray.myMethod()`, the `this` inside the fat arrow function will not refer to `myArray`. Instead, it will be determined by the surrounding scope, which in this case is the global scope (or the closest non-arrow function surrounding scope).\n\nTo access the correct `this` value inside the method, you should use a regular function declaration or a regular function expression. For example:\n\n```javascript\nArray.prototype.myMethod = function () {\n  console.log(this); // 'this' will refer to the array instance\n};\n\nconst myArray = [1, 2, 3];\nmyArray.myMethod(); // Output: [1, 2, 3] (referring to myArray)\n```\n\nUsing a regular function allows the method to have its own `this` binding, which will be set to the array instance on which the method is called.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 27
    },
    {
      "subject": "js",
      "title": "can we create deep copyof object using spread operator?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "No, using the spread operator (`...`) alone to create a shallow copy of an object. It does not create a deep copy. A shallow copy only creates a new object with the same top-level properties as the original object, but the nested objects and arrays inside the original object will still reference the same memory locations in both the original and copied objects.\n\nTo create a deep copy of an object, including all nested objects and arrays, you need to use other methods or techniques. Here are a few commonly used approaches:\n\n1. Using `JSON.parse()` and `JSON.stringify()`: You can serialize the object to a JSON string using `JSON.stringify()`, and then parse it back into a new object using `JSON.parse()`. This technique creates a deep copy but has limitations when dealing with functions, prototypes, or circular references.\n\n   ```javascript\n   const originalObject = { ... };\n   const deepCopy = JSON.parse(JSON.stringify(originalObject));\n   ```\n\n2. Using libraries or utility functions: There are several third-party libraries, such as Lodash or Underscore, that provide functions like `cloneDeep()` or `deepClone()` to create deep copies of objects.\n\n   ```javascript\n   const originalObject = { ... };\n   const deepCopy = _.cloneDeep(originalObject); // Using Lodash\n   ```\n\n3. Implementing a custom deep copy function: You can write a custom function that recursively traverses the object, creating new instances of nested objects and arrays.\n\n   ```javascript\n   function deepCopy(obj) {\n     if (typeof obj !== 'object' || obj === null) {\n       return obj;\n     }\n\n     const copy = Array.isArray(obj) ? [] : {};\n\n     for (let key in obj) {\n       if (obj.hasOwnProperty(key)) {\n         copy[key] = deepCopy(obj[key]);\n       }\n     }\n\n     return copy;\n   }\n\n   const originalObject = { ... };\n   const deepCopy = deepCopy(originalObject);\n   ```\n\nIt's important to note that deep copying large or complex objects can have performance implications, especially if the object contains circular references or deeply nested structures. Therefore, consider the specific requirements and constraints of your application when choosing the appropriate method for creating a deep copy.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 28
    }
  ],
  "es6": [
    {
      "subject": "es6",
      "title": "Hoisting in Modern JavaScript — let, const, and var",
      "ques": "",
      "links": [
        {
          "name": "https://blog.bitsrc.io/hoisting-in-modern-javascript-let-const-and-var-b290405adfda"
        }
      ],
      "tags": [
        {
          "name": "medium.com"
        }
      ],
      "ans": "\nTo avoid possible side effects of hoisting like undefined variables or reference error, \nalways try to declare the variables at the top of their respective scopes and also \nalways try to initialize variables when you declare them.\n\n\nconsole.log(\"a ::\", a); // a :: undefined\nconsole.log(\"b ::\", b); // Uncaught ReferenceError: b is not defined\nconsole.log(\"c ::\", c); // VM1944 hoisting:3 Uncaught ReferenceError: c is not defined\n\nvar a = 10;\nlet b = 20;\nconst c = 30;",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 1
    },
    {
      "subject": "es6",
      "title": "Javascript set",
      "ques": "",
      "links": [
        {
          "name": "https://bretcameron.medium.com/how-to-make-your-code-faster-using-javascript-sets-b432457a4a77#:~:text=Because%20Set.,time%20of%20O(N)."
        }
      ],
      "tags": [
        {
          "name": "set"
        },
        {
          "name": "Oracle"
        }
      ],
      "ans": "let s = new Set([1,2,3]);\n\nconsole.log(s);\ns.add(4);\nconsole.log(s);\ns.add(1);\nconsole.log(s);",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 2
    },
    {
      "subject": "es6",
      "title": "Javascript Private/public/static vars/methods",
      "ques": "",
      "links": [
        {
          "name": "https://stackblitz.com/edit/js-syltmu?file=index.html,index.js"
        }
      ],
      "tags": [],
      "ans": "class Employee{\n  #salary = \"10000\";\n  name = \"VJ\";\n\n  #getSalary () {\n    return this.#salary;\n  }\n\n  getEmpName() {\n    return this.name;\n  }\n\n}\nconst e1 = new Employee();\n// console.log(\"Employee class ::\", Employee);\nconsole.log(\"Employee class ::\", Employee);\n// console.log(\"Employee class obj ::\", e1);\n\n// console.log(\"Employee - private var salary ::\", e1.#salary());\n//console.log(\"Employee - private methid getSalary ::\", e1.#getSalary());\n\n\n\nfunction Developer(){\n  dev_name = \"VJ developer\";\n  dev_skill = \"FE\";\n\n  this.exp = 5; \n\n  function getDevName(){\n    return dev_name;\n  }\n\n  this.getExp = function(){\n    return \"*getExp\"\n  }\n}\n\nDeveloper.prototype.getDevDetails = function(){\n  return \"*getDevDetails\"\n};\n\nDeveloper.getDevSkill = function(){\n  return dev_skill;\n}\n\nconsole.log(\"static method getDevSkill ::\", Developer.getDevSkill() );\n\nconst d1 = new Developer();\n\nconsole.log(\"Developer obj ::\", d1);",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 3
    }
  ],
  "ts": [],
  "html": [],
  "css": [],
  "ng": [],
  "react": [
    {
      "subject": "react",
      "title": "Basic Difference between Angular and React",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "a. Code organigation\nb. Framework v/s lib\nc. Code bundling\nd. Features - \n     i. routes, \n     ii. formComponents, \n     iii. services, \n     iv. directives, \n     v. pipes, \n     vi. dependency injection\n     \n     \nChatGPT\n---------\nAngular and React are two popular JavaScript frameworks used for building web applications. While they have some similarities, there are several key differences between them:\n\n1. **Architecture and Design Philosophy:**\n   - Angular: Angular is a complete framework that follows the Model-View-Controller (MVC) architectural pattern. It provides a comprehensive solution with a set of predefined practices and opinions on how to structure and develop applications.\n   - React: React is a JavaScript library focused on the View layer. It follows a component-based architecture and encourages a more flexible and modular approach to building UI components.\n\n2. **Language:**\n   - Angular: Angular is primarily written in TypeScript, a statically typed superset of JavaScript. It enforces strict typing and offers features like interfaces, classes, and decorators.\n   - React: React is written in JavaScript and supports both JavaScript and TypeScript. However, it doesn't require the use of TypeScript, and you can develop React applications using plain JavaScript.\n\n3. **Learning Curve:**\n   - Angular: Angular has a steeper learning curve due to its extensive features, complex concepts (such as dependency injection and decorators), and a large set of built-in tools and features.\n   - React: React has a relatively easier learning curve, especially for developers already familiar with JavaScript. It has a smaller API surface and focuses mainly on the component-based approach.\n\n4. **Size and Performance:**\n   - Angular: Angular applications tend to have a larger bundle size because of the framework's built-in features and overhead. It includes its own runtime and dependency injection system.\n   - React: React is lightweight and has a smaller bundle size compared to Angular. However, it requires additional libraries and tools for features like routing and state management.\n\n5. **Community and Ecosystem:**\n   - Angular: Angular has a mature and well-established ecosystem with a wide range of official and community-supported libraries, tools, and resources. It provides a more opinionated approach to development.\n   - React: React has a large and vibrant community with an extensive ecosystem. There are numerous third-party libraries and tools available for various needs, allowing developers more flexibility and choice.\n\n6. **Mobile Development:**\n   - Angular: Angular has built-in support for native mobile app development through the Ionic framework. It allows developers to create cross-platform mobile apps using Angular and web technologies.\n   - React: React offers React Native, a popular framework for building native mobile apps. React Native allows developers to write code once and deploy it on multiple platforms.\n\nIt's important to note that the choice between Angular and React often depends on project requirements, team expertise, and personal preferences. Both frameworks have their strengths and are widely used in the industry for different types of applications.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 1
    },
    {
      "subject": "react",
      "title": "Bare minimum library needed in react?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "a. react\nb. react-dom\nc. redux\nd. react-redux\ne. react-router\nf. axiom\n\nChatGPT\n---------\n\nReact is a JavaScript library for building user interfaces. While React itself provides the core functionality for creating components and managing state, there are a few essential libraries that are commonly used alongside React in most projects. These libraries help with routing, state management, and other common tasks. Here are some of the bare minimum libraries that are often used in React projects:\n\n1. `react-dom`: This library is required to render React components in the browser. It provides the `ReactDOM.render()` method, which is used to mount your React components onto the DOM.\n\n2. `react-router-dom`: If your application involves multiple pages or routes, `react-router-dom` provides the necessary tools for client-side routing. It enables you to define routes, handle navigation, and render specific components based on the current URL.\n\n3. `prop-types`: While not strictly required, `prop-types` is a library used for defining and validating the props passed to React components. It helps ensure that the correct props are provided and can be helpful for debugging and maintaining your codebase.\n\n4. `axios` or `fetch`: These libraries are used for making HTTP requests to APIs. While you can use the built-in `fetch` API provided by modern browsers, libraries like `axios` offer additional features, such as request cancellation and response interception.\n\nThese are the essential libraries commonly used in React projects. However, depending on the specific requirements of your project, you may need additional libraries for state management (e.g., Redux, MobX), UI components (e.g., Material-UI, Ant Design), or form handling (e.g., Formik, React Hook Form).\n\nIt's worth noting that while these libraries are widely used and popular, they are not mandatory for every React project. The choice of additional libraries depends on the specific needs and complexity of your application.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 2
    },
    {
      "subject": "react",
      "title": "React Lifecycle in functional component and class component",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "\n\n\n\n\nChatGPT\n----------\nIn React, components have lifecycle methods that allow you to perform certain actions at different stages of a component's life. However, with the introduction of React Hooks, functional components can now also utilize lifecycle-like behavior. Here's a comparison of the lifecycle in functional components with React Hooks and class components:\n\n**Functional Components with React Hooks:**\n1. **Mounting:**\n   - `useEffect(() => {}, [])`: This is equivalent to the `componentDidMount` lifecycle method. It runs the provided callback function after the component is initially rendered and mounted.\n2. **Updating:**\n   - `useEffect(() => {})`: This is equivalent to the `componentDidUpdate` lifecycle method. It runs the provided callback function after each rendering cycle of the component.\n3. **Unmounting:**\n   - `useEffect(() => { return () => {} }, [])`: This is equivalent to the `componentWillUnmount` lifecycle method. The returned cleanup function runs when the component is about to be unmounted.\n\n**Class Components:**\n1. **Mounting:**\n   - `componentDidMount()`: This method is called once after the component is initially rendered and mounted to the DOM.\n2. **Updating:**\n   - `componentDidUpdate(prevProps, prevState)`: This method is called after the component updates and re-renders. It receives the previous props and state as parameters.\n3. **Unmounting:**\n   - `componentWillUnmount()`: This method is called right before the component is unmounted and destroyed.\n\nIt's important to note that React Hooks introduced the `useEffect` hook, which combines functionalities of multiple lifecycle methods into a single hook. By specifying dependencies as an array, you can control when the effect runs based on changes to specific props or state values.\n\nAdditionally, React Hooks provide other hooks like `useState`, `useContext`, and `useReducer` to manage state and context within functional components.\n\nOverall, React Hooks and functional components provide a simpler and more streamlined approach to managing component lifecycles, reducing the need for separate methods for different lifecycle stages as seen in class components.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 3
    },
    {
      "subject": "react",
      "title": "Stateless v/s stateful component",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "\n\n\n\n\nChatGPT\n---------\nIn React, components can be classified into two categories: stateless components and stateful components. Let's explore each of them and provide examples of both types:\n\n1. **Stateless Components (Functional Components):**\nStateless components, also known as functional components, are primarily concerned with rendering UI based on the props they receive. They don't have their own internal state and focus on presenting data passed to them. Stateless components are simpler and easier to understand and test.\n\nHere's an example of a stateless component in React:\n\n```jsx\nimport React from 'react';\n\nconst Greeting = ({ name }) => {\n  return <h1>Hello, {name}!</h1>;\n};\n\nexport default Greeting;\n```\n\nIn the above code, the `Greeting` component is a stateless component that receives a `name` prop and renders a greeting message. It takes the `name` prop as a parameter and displays it using JSX. This component doesn't manage any state and relies solely on the props passed to it.\n\n2. **Stateful Components (Class Components):**\nStateful components, also known as class components, have their own internal state and can handle events, perform actions, and update their state. They are more complex than stateless components and are suitable for managing more complex application logic and stateful behavior.\n\nHere's an example of a stateful component in React:\n\n```jsx\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  incrementCount = () => {\n    this.setState(prevState => ({\n      count: prevState.count + 1\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.incrementCount}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n```\n\nIn the above code, the `Counter` component is a stateful component that manages its own `count` state. It initializes the state in the constructor and provides a method `incrementCount` to update the count value. The `render` method displays the count value and a button that triggers the `incrementCount` method when clicked.\n\nStateful components have the ability to update their internal state using the `setState` method, triggering re-renders of the component and any child components that depend on the state.\n\nIn summary, stateless components are focused on rendering UI based on the props they receive, while stateful components have their own internal state and can handle events and perform actions. The choice between stateless and stateful components depends on the complexity of the component's behavior and the need for managing and updating state.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 4
    },
    {
      "subject": "react",
      "title": "Smart v/s dumb component",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "\n\nChatGPT\n---------\nIn React, the terms \"smart component\" and \"dumb component\" are sometimes used to describe different types of components based on their responsibilities and level of complexity. Let's explore each type and provide examples with code:\n\n1. **Smart Components (Container Components):**\nSmart components, also known as container components, are responsible for managing state, fetching data, and handling logic. They are typically more complex and deal with the business logic of the application. Smart components can contain both stateful and stateless components, coordinating the flow of data and behavior.\n\nHere's an example of a smart component in React:\n\n```jsx\nimport React, { Component } from 'react';\nimport UserList from './UserList';\nimport { fetchUsers } from '../api/userApi';\n\nclass UserContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: []\n    };\n  }\n\n  componentDidMount() {\n    fetchUsers()\n      .then(users => {\n        this.setState({ users });\n      })\n      .catch(error => {\n        console.error('Error fetching users:', error);\n      });\n  }\n\n  render() {\n    return <UserList users={this.state.users} />;\n  }\n}\n\nexport default UserContainer;\n```\n\nIn the above code, the `UserContainer` component is a smart component responsible for fetching users from an API and managing the users' state. It uses the `componentDidMount` lifecycle method to fetch the users asynchronously when the component mounts. The fetched users are stored in the component's state and then passed as props to a child component `UserList`.\n\n2. **Dumb Components (Presentational Components):**\nDumb components, also known as presentational components, focus solely on rendering UI based on the props they receive. They have no internal state or logic and are primarily concerned with how things look. Dumb components receive data and callbacks as props and render them in a declarative manner.\n\nHere's an example of a dumb component in React:\n\n```jsx\nimport React from 'react';\n\nconst UserList = ({ users }) => {\n  return (\n    <div>\n      <h1>User List</h1>\n      <ul>\n        {users.map(user => (\n          <li key={user.id}>{user.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default UserList;\n```\n\nIn the above code, the `UserList` component is a dumb component that receives an array of `users` as props and renders them as a list. It doesn't have its own state or perform any data fetching or manipulation. It simply iterates over the `users` prop and renders the names of users in an unordered list.\n\nDumb components are reusable and purely focused on presenting UI based on the provided props. They are easier to understand, test, and maintain as they have clear responsibilities.\n\nIn summary, smart components (container components) handle state, data fetching, and logic, while dumb components (presentational components) focus on rendering UI based on props. Separating components into these categories helps with code organization, reusability, and maintainability. Smart components handle the complexity of the application, while dumb components focus on rendering and presentation.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 5
    },
    {
      "subject": "react",
      "title": "Class v/s functional component, code example",
      "ques": "",
      "links": [
        {
          "name": "https://stackblitz.com/edit/stackblitz-starters-v7hs8g?file=src%2FCustomer.tsx"
        }
      ],
      "tags": [],
      "ans": "Sure! Let's compare a class component and a functional component in React by providing code examples for both:\n\n**Class Component:**\n\n```jsx\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  incrementCount = () => {\n    this.setState(prevState => ({\n      count: prevState.count + 1\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={this.incrementCount}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n```\n\nIn the above code, we have a class component called `Counter`. It extends the `Component` class from React, and its state is initialized in the constructor with a `count` value of 0. The component has a method called `incrementCount` that updates the state by incrementing the `count` value. The updated count is displayed in the render method, along with a button that triggers the `incrementCount` method when clicked.\n\n**Functional Component:**\n\n```jsx\nimport React, { useState } from 'react';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n\n  const incrementCount = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={incrementCount}>Increment</button>\n    </div>\n  );\n};\n\nexport default Counter;\n```\n\nIn the above code, we have a functional component called `Counter`. It utilizes the `useState` hook from React to manage the `count` state. The `useState` hook initializes the state with a value of 0 and returns an array with two elements: the current state value and a function to update the state. The component renders the count value and a button that triggers the `incrementCount` function to update the state when clicked.\n\nBoth examples achieve the same functionality of incrementing a counter value, but they differ in syntax and structure. Class components use a class-based syntax and extend the `Component` class, while functional components are JavaScript functions using the functional component syntax. Functional components utilize hooks, such as `useState`, to manage state and perform side effects.\n\nIt's worth noting that functional components have become the preferred approach in React due to their simplicity, reusability, and easier testing. However, class components are still relevant, especially in legacy codebases or when working with older versions of React that don't support hooks.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 6
    },
    {
      "subject": "react",
      "title": "Redux example - claas v/s hooks",
      "ques": "",
      "links": [
        {
          "name": "https://jsbin.com/depavejudi/1/edit?js,output"
        },
        {
          "name": "https://stackblitz.com/edit/react-6swqv4?file=src%2Fcomponents%2FHeader.js"
        }
      ],
      "tags": [],
      "ans": "Certainly! Let's compare a Redux example implemented using class components and hooks.\n\n**Redux with Class Components:**\n\n```jsx\n// CounterActions.js\nexport const increment = () => {\n  return {\n    type: 'INCREMENT'\n  };\n};\n\n// CounterReducer.js\nconst initialState = {\n  count: 0\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n\n// Counter.js\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { increment } from './CounterActions';\n\nclass Counter extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>Count: {this.props.count}</p>\n        <button onClick={this.props.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    count: state.count\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    increment: () => dispatch(increment())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n```\n\nIn the above code, we have a counter application implemented using Redux with class components. The `CounterActions.js` file defines an action creator `increment` that returns an action object with the type `'INCREMENT'`. The `CounterReducer.js` file sets up the initial state and a reducer function that handles the `'INCREMENT'` action by updating the count value in the state.\n\nThe `Counter` component connects to the Redux store using the `connect` function from `react-redux`. It receives the count value from the store as a prop and the `increment` action creator as a prop. When the increment button is clicked, it dispatches the `increment` action to the Redux store.\n\n**Redux with Functional Components and Hooks:**\n\n```jsx\n// CounterActions.js\nexport const increment = () => {\n  return {\n    type: 'INCREMENT'\n  };\n};\n\n// CounterReducer.js\nconst initialState = {\n  count: 0\n};\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n\n// Counter.js\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment } from './CounterActions';\n\nconst Counter = () => {\n  const count = useSelector(state => state.count);\n  const dispatch = useDispatch();\n\n  const handleIncrement = () => {\n    dispatch(increment());\n  };\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleIncrement}>Increment</button>\n    </div>\n  );\n};\n\nexport default Counter;\n```\n\nIn the above code, we have the same counter application implemented using functional components and hooks. Instead of using class components, we utilize the `useSelector` and `useDispatch` hooks from `react-redux` to access the state and dispatch actions.\n\nThe `Counter` component uses the `useSelector` hook to get the `count` value from the Redux store. It also uses the `useDispatch` hook to get the dispatch function. When the increment button is clicked, it calls the `handleIncrement` function, which dispatches the `increment` action to the Redux store.\n\nFunctional components with hooks provide a more concise and modern approach to working with Redux, eliminating the need for class components, mapStateToProps, and mapDispatchToProps. Hooks make it easier to access state and dispatch\n\n actions directly within the component function.\n\nBoth the class component and functional component examples achieve the same result of incrementing a counter using Redux. However, the functional component with hooks approach is generally preferred in modern React applications due to its simplicity and reduced boilerplate.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 7
    },
    {
      "subject": "react",
      "title": "How to implement tree like structure for directory and files in react with state to open close directory",
      "ques": "",
      "links": [
        {
          "name": "https://stackblitz.com/edit/stackblitz-starters-ydskrn"
        }
      ],
      "tags": [],
      "ans": "To implement a tree-like structure for directories and files in React with state to open/close directories, you can create a recursive component that represents each directory and file. Here's an example implementation:\n\n```jsx\nimport React, { useState } from 'react';\n\nconst TreeNode = ({ node }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const renderChildNodes = () => {\n    if (node.children && node.children.length > 0) {\n      return (\n        <ul>\n          {node.children.map((child) => (\n            <li key={child.id}>\n              <TreeNode node={child} />\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div>\n      <div onClick={handleToggle}>\n        {isOpen ? <span>-</span> : <span>+</span>}\n        {node.name}\n      </div>\n      {isOpen && renderChildNodes()}\n    </div>\n  );\n};\n\nexport default TreeNode;\n```\n\nIn the above code, the `TreeNode` component represents a single node in the directory tree. It takes a `node` prop, which contains information about the directory or file, including its name, children (subdirectories/files), and an identifier (`id`).\n\nThe `isOpen` state is used to track whether the directory node is open or closed. The `handleToggle` function toggles the state value when the node is clicked.\n\nThe `renderChildNodes` function recursively renders child nodes if the current node has children. It maps through each child and recursively renders the `TreeNode` component for them.\n\nInside the `return` statement of the component, the directory or file name is displayed along with a toggle icon. Clicking on the toggle icon triggers the `handleToggle` function to open/close the node. If the node is open (`isOpen` is `true`), the child nodes are rendered.\n\nTo use the `TreeNode` component, you can pass the root node of your directory structure as a prop:\n\n```jsx\nimport React from 'react';\nimport TreeNode from './TreeNode';\n\nconst DirectoryTree = () => {\n  const rootDirectory = {\n    id: 1,\n    name: 'Root',\n    children: [\n      {\n        id: 2,\n        name: 'Folder 1',\n        children: [\n          {\n            id: 4,\n            name: 'Subfolder 1',\n            children: [],\n          },\n          {\n            id: 5,\n            name: 'Subfolder 2',\n            children: [\n              {\n                id: 6,\n                name: 'File 1',\n              },\n              {\n                id: 7,\n                name: 'File 2',\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 3,\n        name: 'Folder 2',\n        children: [],\n      },\n    ],\n  };\n\n  return (\n    <div>\n      <TreeNode node={rootDirectory} />\n    </div>\n  );\n};\n\nexport default DirectoryTree;\n```\n\nIn the `DirectoryTree` component, you can define the directory structure using an object representing the root directory and its children. Each directory or file can have an `id`, `name`, and `children` property. Pass the root directory to the `TreeNode` component as a prop.\n\nThis implementation creates a collapsible tree structure where you can open/close directories by clicking on the toggle icon. Child directories/files will be displayed when a directory is open. You can further customize the appearance and behavior based on your requirements.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 8
    }
  ],
  "redux": [],
  "performance": [],
  "sd": [
    {
      "subject": "sd",
      "title": "LRU cache implementation in Javascript",
      "ques": "",
      "links": [
        {
          "name": "https://stackoverflow.com/questions/996505/lru-cache-implementation-in-javascript"
        },
        {
          "name": "https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9"
        },
        {
          "name": "https://leetcode.com/problems/lru-cache/?envType=list&envId=rel0rvfm"
        }
      ],
      "tags": [
        {
          "name": "iCloud-note"
        },
        {
          "name": "medium.com"
        },
        {
          "name": "Leetcode"
        }
      ],
      "ans": "\nclass LRU {\n    constructor(max = 10) {\n        this.max = max;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        let item = this.cache.get(key);\n        if (item) {\n            // refresh key\n            this.cache.delete(key);\n            this.cache.set(key, item);\n        }\n        return item;\n    }\n\n    set(key, val) {\n        // refresh key\n        if (this.cache.has(key)) this.cache.delete(key);\n        // evict oldest\n        else if (this.cache.size == this.max) this.cache.delete(this.first());\n        this.cache.set(key, val);\n    }\n\n    first() {\n        return this.cache.keys().next().value;\n    }\n}",
      "diff": 1,
      "imp": 1,
      "cate": [
        "caching"
      ],
      "id": 1
    },
    {
      "subject": "sd",
      "title": "How do I create a URL shortener(JS)?",
      "ques": "",
      "links": [
        {
          "name": "https://stackoverflow.com/questions/742013/how-do-i-create-a-url-shortener"
        }
      ],
      "tags": [
        {
          "name": "iCloud-note"
        },
        {
          "name": "stackoverflow"
        }
      ],
      "ans": "How to convert the ID to a shortened URL\n-----------------------------------------\nThink of an alphabet we want to use. In your case, that's [a-zA-Z0-9]. It contains 62 letters.\nTake an auto-generated, unique numerical key (the auto-incremented id of a MySQL table for example).\n\nFor this example, I will use 12510 (125 with a base of 10).\n\nNow you have to convert 12510 to X62 (base 62).\n\n12510 = 2×621 + 1×620 = [2,1]\n\nThis requires the use of integer division and modulo. A pseudo-code example:\n\ndigits = []\n\nwhile num > 0\n  remainder = modulo(num, 62)\n  digits.push(remainder)\n  num = divide(num, 62)\n\ndigits = digits.reverse\nNow map the indices 2 and 1 to your alphabet. This is how your mapping (with an array for example) could look like:\n\n0  → a\n1  → b\n...\n25 → z\n...\n52 → 0\n61 → 9\nWith 2 → c and 1 → b, you will receive cb62 as the shortened URL.\n\nhttp://shor.ty/cb\n\n\nHow to resolve a shortened URL to the initial ID\n---------------------------------------------------\nThe reverse is even easier. You just do a reverse lookup in your alphabet.\n\ne9a62 will be resolved to \"4th, 61st, and 0th letter in the alphabet\".\n\ne9a62 = [4,61,0] = 4×622 + 61×621 + 0×620 = 1915810\n\nNow find your database-record with WHERE id = 19158 and do the redirect.",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 2
    },
    {
      "subject": "sd",
      "title": "Encode and Decode TinyURL(Java)",
      "ques": "TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\n\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\n\nImplement the Solution class:\n\nSolution() Initializes the object of the system.\nString encode(String longUrl) Returns a tiny URL for the given longUrl.\nString decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.",
      "links": [
        {
          "name": "https://leetcode.com/problems/encode-and-decode-tinyurl/"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "\npackage com.company;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n\n// Approach #3 Using hashcode\nclass CodecX3 {\n    Map<Integer, String> map = new HashMap<>();\n\n    public String encode(String longUrl) {\n        map.put(longUrl.hashCode(), longUrl);\n        return \"http://tinyurl.com/\" + longUrl.hashCode();\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(Integer.parseInt(shortUrl.replace(\"http://tinyurl.com/\", \"\")));\n    }\n}\n\n// Approach #2 Variable-length Encoding\nclass CodecX2 {\n    String chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    HashMap<String, String> map = new HashMap<>();\n    int count = 1;\n\n    public String getString() {\n        int c = count;\n        StringBuilder sb = new StringBuilder();\n        while (c > 0) {\n            c--;\n            sb.append(chars.charAt(c % 62));\n            c /= 62;\n        }\n        return sb.toString();\n    }\n\n    public String encode(String longUrl) {\n        String key = getString();\n        map.put(key, longUrl);\n        count++;\n        return \"http://tinyurl.com/\" + key;\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(shortUrl.replace(\"http://tinyurl.com/\", \"\"));\n    }\n}\n\n// Approach #4 Using random number\nclass CodecX4 {\n    Map<Integer, String> map = new HashMap<>();\n    Random r = new Random();\n    int key = r.nextInt(Integer.MAX_VALUE);\n\n    public String encode(String longUrl) {\n        while (map.containsKey(key)) {\n            key = r.nextInt(Integer.MAX_VALUE);\n        }\n        map.put(key, longUrl);\n        return \"http://tinyurl.com/\" + key;\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(Integer.parseInt(shortUrl.replace(\"http://tinyurl.com/\", \"\")));\n    }\n}\n\n// Approach #5 Random fixed-length encoding\nclass Codec {\n    String alphabet = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    HashMap<String, String> map = new HashMap<>();\n    Random rand = new Random();\n    String key = getRand();\n\n    public String getRand() {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 6; i++) {\n            sb.append(alphabet.charAt(rand.nextInt(62)));\n        }\n        return sb.toString();\n    }\n\n    public String encode(String longUrl) {\n        while (map.containsKey(key)) {\n            key = getRand();\n        }\n        map.put(key, longUrl);\n        return \"http://tinyurl.com/\" + key;\n    }\n\n    public String decode(String shortUrl) {\n        return map.get(shortUrl.replace(\"http://tinyurl.com/\", \"\"));\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n\n        Codec c1 = new Codec();\n        String encodeURL = c1.encode(\"https://leetcode.com/problems/design-tinyurl\");\n        System.out.println(\"encodeURL ::\" + encodeURL);\n\n        String decodeURL = c1.decode(encodeURL);\n        System.out.println(\"decodeURL ::\" + decodeURL);\n\n\n    }\n}\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "general"
      ],
      "id": 3
    },
    {
      "subject": "sd",
      "title": "difference between webhook and SSE",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "Webhooks and Server-Sent Events (SSE) are both mechanisms used for server-to-client communication, but they have some key differences:\n\n**Webhooks:**\n\n1. **Client-initiated**: Webhooks are initiated by the client. The client registers a URL endpoint with the server and expects the server to make HTTP requests to that endpoint when certain events occur.\n\n2. **HTTP requests**: When an event occurs on the server, it sends an HTTP POST request to the registered webhook endpoint. The payload typically contains information related to the event.\n\n3. **One-time delivery**: Webhooks follow a one-time delivery model. Once the server sends the HTTP request to the webhook endpoint, it considers the task complete and does not retain any knowledge of the delivery status.\n\n4. **Payload control**: The server decides what information to include in the webhook payload. The client needs to handle the received payload and process it accordingly.\n\n5. **Flexible integration**: Webhooks can be integrated with various client applications and systems. The client needs to implement an endpoint to receive and process the webhook requests.\n\n**Server-Sent Events (SSE):**\n\n1. **Server-initiated**: SSE is initiated by the server. The client establishes a persistent connection with the server and waits for the server to send updates or events.\n\n2. **Event streams**: The server sends a continuous stream of events to the client over a single HTTP connection. Each event is sent as a separate message and can contain structured data.\n\n3. **Persistent connection**: SSE maintains a long-lived connection between the client and server, allowing the server to push updates to the client as they occur.\n\n4. **Automatic retry**: If the connection between the client and server is interrupted, SSE automatically attempts to reconnect and resume the event stream.\n\n5. **Event-driven**: SSE follows an event-driven model, where the server sends events to the client in real-time. The client can listen for specific event types and take appropriate actions.\n\n**Use Cases:**\n\n- Webhooks are commonly used for notifications, integrations, and triggering actions in external systems or services when specific events occur on the server-side.\n\n- SSE is suitable for scenarios where the client needs real-time updates from the server, such as live data feeds, chat applications, or real-time monitoring dashboards.\n\nIn summary, webhooks are client-initiated, one-time delivery mechanisms, while SSE is server-initiated with persistent connections, allowing the server to continuously send events to the client. The choice between webhooks and SSE depends on the requirements of your application and the type of communication model that best fits your use case.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 4
    },
    {
      "subject": "sd",
      "title": "460. LFU Cache",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/lfu-cache/?envType=list&envId=rel0rvfm"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 5
    },
    {
      "subject": "sd",
      "title": "588. Design In-Memory File System",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/design-in-memory-file-system/?envType=list&envId=rel0rvfm"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 6
    },
    {
      "subject": "sd",
      "title": "604. Design Compressed String Iterator",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/design-compressed-string-iterator/?envType=list&envId=rel0rvfm"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 7
    },
    {
      "subject": "sd",
      "title": "635. Design Log Storage System",
      "ques": "",
      "links": [
        {
          "name": "https://leetcode.com/problems/design-log-storage-system/?envType=list&envId=rel0rvfm"
        }
      ],
      "tags": [
        {
          "name": "Leetcode"
        }
      ],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 8
    }
  ],
  "shell": [
    {
      "subject": "shell",
      "title": "Check Disk Space",
      "ques": "How to Check Disk Space in Linux?",
      "links": [
        {
          "name": "https://phoenixnap.com/kb/linux-check-disk-space"
        }
      ],
      "tags": [
        {
          "name": "General"
        },
        {
          "name": "linux"
        }
      ],
      "ans": "\n/*\nThe df command stands for disk free, and it shows you the amount of space taken up by \ndifferent drives. By default, df displays values in 1-kilobyte blocks.\n*/\ndf\n\n\n/* Display Usage in Megabytes and Gigabytes */\ndf -h\n\n/* Understanding the Output Format */\n\nFilesystem         Size      Used     Avail    Use%    Mounted on\n\nudev               210M        0        210M     0%       /dev\n\ntmpfs              49M       1004K      48M      3%       /run\n\n/dev/sda2          7.9G       4.3G      3.2G     58%      /\n\nYour output may have more entries. The columns should be self-explanatory:-\n\nFilesystem – This is the name of each particular drive. This includes physical hard drives, \nlogical (partitioned) drives, and virtual or temporary drives.\nSize – The size of the filesystem.\nUsed – Amount of space used on each filesystem.\nAvail – The amount of unused (free) space on the filesystem.\nUse% – Shows the percent of the disk used.\nMounted on – This is the directory where the file system is located. This is also sometimes \ncalled a mount point.\n\nThe list of filesystems includes your physical hard drive, as well as virtual hard drives:-\n\n/dev/sda2 – This is your physical hard drive. It may be listed as /sda1, /sda0, or you may even have more than one. /dev stands for device.\nudev – This is a virtual directory for the /dev directory. This is part of the Linux operating \nsystem.\ntmpfs – You may have several of these. These are used by /run and other Linux processes as \ntemporary filesystems for running the operating system. For example, the tmpfs /run/lock is \nused to create lockfiles. These are the files that prevent multiple users from changing the \nsame file at the same time.\n\n\n/* Display a Specific File System */\ndf -h /dev/sda2\ndf -h /\n\n/* Display File Systems by Type */\ndf -ht ext4\n\n/* Display Size in 1000 Instead of 1024 */\ndu -H\n\n/*\nCheck Disk Space in Linux With du Command\nThe du command displays disk usage\n*/\ndu\ndu -h\ndu -hs\ndu -hs /etc\nsudo du -hs /etc\n\n\n/* HELP */\ndf --help or du --help.\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "disk"
      ],
      "id": 1
    }
  ],
  "git": [
    {
      "subject": "git",
      "title": "Git general commands",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "git remote -v\n\ngit push origin HEAD\n\ngit fetch --tags --force\n\ngit fetch -t\n\ngit tag\n\ngit checkout -b \"<branch_name>\" -t origin/master\n\ngit pull --rebase\n\ngit rebase -i HEAD~2 // Squash",
      "diff": 3,
      "imp": 3,
      "cate": [
        "general"
      ],
      "id": 1
    }
  ],
  "py": [],
  "java": [],
  "oth": [],
  "node": [
    {
      "subject": "node",
      "title": "Express API references",
      "ques": "",
      "links": [
        {
          "name": "https://expressjs.com/en/4x/api.html"
        }
      ],
      "tags": [
        {
          "name": "express"
        }
      ],
      "ans": "var express = require(\"express\");\nvar app = express();\nvar bodyParser = require(\"body-parser\");\nvar mongoose = require(\"mongoose\");\nvar router = express.Router();\nvar userSchema = mongoose.Schema({\n  name: String,\n});\nvar User = mongoose.model(\"User\", userSchema);\n\nvar albumSchema = mongoose.Schema({\n  performer: String,\n  title: String,\n  cost: Number,\n});\nvar Album = mongoose.model(\"Album\", albumSchema);\n\nvar puchaseSchema = mongoose.Schema({\n  user: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n  album: { type: mongoose.Schema.Types.ObjectId, ref: \"Album\" },\n});\nvar Purchase = mongoose.model(\"Purchase\", puchaseSchema);\n\napp.use(bodyParser.json());\napp.listen(3000);\n\n// TODO: GET /albums\napp.get(\"/albums\", (req, res) => {\n  Album.find((err, albs) => {\n    if (err) {\n      return err;\n    }\n    res.json(200, { data: albs });\n  });\n});\n\n// TODO: GET /albums/:id\napp.get(\"/albums/:id\", (req, res) => {\n  let id = req.params.id;\n  Album.findById(id, (err, albs) => {\n    if (err) {\n      return err;\n    }\n    res.json(200, { data: albs });\n  });\n});\n\n// TODO: POST /albums\napp.post(\"/albums\", (request, response) => {\n  let payload = request.body;\n  let album = new Album(payload);\n  album.save((err, alb) => {\n    if (err) {\n      return err;\n    }\n    response.json(200, { data: alb });\n  });\n});\n\n// TODO: PUT /albums/:id\napp.put(\"/albums/:id\", (request, response) => {\n  let id = request.params.id;\n  let payload = request.body;\n\n  Album.findOneAndUpdate({ _id: id }, payload, { new: true }, (err, alb) => {\n    if (err) {\n      return err;\n    }\n    response.json(200, { data: alb });\n  });\n});\n\n// TODO: DELETE /albums/:id\napp.delete(\"/albums/:id\", (req, res) => {\n  let id = req.params.id;\n  Album.remove({ _id: id }, (err, albs) => {\n    if (err) {\n      return err;\n    }\n    res.sendStatus(204);\n  });\n});\n\n// TODO: POST /purchases\napp.post(\"/purchases\", (request, response) => {\n  let payload = request.body;\n  let purchase = new Purchase(payload);\n  purchase.save((err, pur) => {\n    if (err) {\n      return err;\n    }\n\n    Purchase.findOne({ _id: pur._id })\n      .populate(\"user\")\n      .populate(\"album\")\n      .exec((err, data) => {\n        if (err) {\n          return err;\n        }\n        response.json(200, { data: data });\n      });\n  });\n});\n\napp.use(\"/\", router);",
      "diff": 1,
      "imp": 1,
      "cate": [
        "framework"
      ],
      "id": 1
    },
    {
      "subject": "node",
      "title": "Node.js buffer: A complete guide",
      "ques": "",
      "links": [
        {
          "name": "https://www.w3schools.com/nodejs/ref_buffer.asp"
        },
        {
          "name": "https://blog.logrocket.com/node-js-buffer-complete-guide/"
        }
      ],
      "tags": [
        {
          "name": "buffer"
        }
      ],
      "ans": "In Node.js, the Buffer module is used to handle binary data and perform operations on raw binary data. It provides a way to work with data streams, file system operations, network communications, and other I/O operations that involve handling binary data.\n\nHere's why and how you can use the Buffer module in Node.js:\n\n1. Binary Data Handling: The Buffer module allows you to create and manipulate binary data, such as reading from or writing to binary files, working with network protocols, or interacting with binary data formats. It provides methods for encoding and decoding data in various formats, such as UTF-8, ASCII, Base64, and more.\n\n2. Buffer Creation: You can create a Buffer object using various methods provided by the Buffer module. For example, you can create a new Buffer from a string, an array of bytes, or by specifying the size of the buffer. Once created, you can read from and write to the buffer using its methods.\n\n   ```javascript\n   // Creating a new Buffer\n   const buffer = Buffer.from('Hello, World!', 'utf8');\n\n   // Reading from the buffer\n   console.log(buffer.toString('utf8')); // Output: Hello, World!\n\n   // Writing to the buffer\n   buffer.write('Node.js');\n   console.log(buffer.toString('utf8')); // Output: Node.js, World!\n   ```\n\n3. Buffer Manipulation: The Buffer module provides methods for manipulating buffer data, such as copying, slicing, concatenating, and comparing buffers. These methods allow you to extract specific portions of the buffer, combine multiple buffers, or perform comparisons and equality checks.\n\n4. Efficient Data Transfer: Buffer objects are used extensively for efficient data transfer between different parts of a Node.js application. For example, when handling network communication or file system operations, data is often read or written in chunks using buffers to minimize memory overhead and improve performance.\n\n   ```javascript\n   // Reading a file into a buffer\n   const fs = require('fs');\n   const buffer = Buffer.alloc(1024); // Create a buffer of size 1024 bytes\n\n   fs.open('file.txt', 'r', (err, fd) => {\n     fs.read(fd, buffer, 0, buffer.length, 0, (err, bytesRead, buffer) => {\n       console.log(buffer.toString('utf8', 0, bytesRead));\n       fs.close(fd, (err) => {\n         // Handle close operation\n       });\n     });\n   });\n   ```\n\nThe Buffer module is particularly useful when dealing with binary data, such as reading or writing files, working with network protocols, handling streams, or performing low-level I/O operations. It provides a way to efficiently handle binary data, manipulate buffers, and convert between different data formats.\n\nIt's important to note that the Buffer module has undergone changes and improvements over different versions of Node.js. In recent versions (starting from Node.js 6.0.0), the Buffer constructor is deprecated, and the recommended way to create buffers is using the `Buffer.from()`, `Buffer.alloc()`, or `Buffer.allocUnsafe()` methods. Be sure to refer to the official Node.js documentation for the version you're using to ensure you're following the recommended practices.",
      "diff": 1,
      "imp": 1,
      "cate": [
        "node_core"
      ],
      "id": 2
    },
    {
      "subject": "node",
      "title": "Node.js child process",
      "ques": "",
      "links": [
        {
          "name": "https://medium.com/@diego.coder/child-processes-in-node-js-37429fb54670"
        },
        {
          "name": "https://blog.logrocket.com/node-js-child-process-launch-external-programs/"
        },
        {
          "name": "https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/"
        }
      ],
      "tags": [
        {
          "name": "child Process"
        }
      ],
      "ans": "Node.js provides several ways to use child processes, allowing you to spawn and communicate with external processes from your Node.js applications. Here are the different ways to use child processes in Node.js:\n\n1. `child_process.spawn()`: This method is used to spawn a new process and provides a straightforward way to execute a command in a separate process. It returns a `ChildProcess` object that allows you to communicate with the spawned process through its `stdin`, `stdout`, and `stderr` streams.\n\n   ```javascript\n   const { spawn } = require('child_process');\n\n   const child = spawn('ls', ['-l']); // Spawning the 'ls -l' command\n\n   child.stdout.on('data', (data) => {\n     console.log(`Output: ${data}`);\n   });\n\n   child.stderr.on('data', (data) => {\n     console.error(`Error: ${data}`);\n   });\n\n   child.on('close', (code) => {\n     console.log(`Child process exited with code ${code}`);\n   });\n   ```\n\n2. `child_process.exec()`: This method is similar to `child_process.spawn()`, but it uses a shell to execute the command. It allows you to execute shell commands, and it buffers the command's output in memory. It also provides a callback to handle the command's output and errors.\n\n   ```javascript\n   const { exec } = require('child_process');\n\n   exec('ls -l', (error, stdout, stderr) => {\n     if (error) {\n       console.error(`Error: ${error.message}`);\n       return;\n     }\n     if (stderr) {\n       console.error(`Error: ${stderr}`);\n       return;\n     }\n     console.log(`Output: ${stdout}`);\n   });\n   ```\n\n3. `child_process.execFile()`: This method is similar to `child_process.exec()`, but it executes a file instead of a shell command. It is useful when you want to run an executable file directly.\n\n   ```javascript\n   const { execFile } = require('child_process');\n\n   execFile('myScript.sh', (error, stdout, stderr) => {\n     if (error) {\n       console.error(`Error: ${error.message}`);\n       return;\n     }\n     if (stderr) {\n       console.error(`Error: ${stderr}`);\n       return;\n     }\n     console.log(`Output: ${stdout}`);\n   });\n   ```\n\n4. `child_process.fork()`: This method is specifically designed for creating child processes that run Node.js modules. It allows you to communicate between the parent and child processes using inter-process communication (IPC). The child process can send messages to the parent process, and vice versa.\n\n   Parent process:\n   ```javascript\n   const { fork } = require('child_process');\n   const child = fork('child.js');\n\n   child.on('message', (message) => {\n     console.log(`Received message from child: ${message}`);\n   });\n\n   child.send('Hello from parent');\n   ```\n\n   Child process (`child.js`):\n   ```javascript\n   process.on('message', (message) => {\n     console.log(`Received message from parent: ${message}`);\n   });\n\n   process.send('Hello from child');\n   ```\n\nThese are the main ways to use child processes in Node.js. Depending on your use case, you can choose the most suitable method to spawn and communicate with child processes effectively.",
      "diff": 1,
      "imp": 1,
      "cate": [
        "node_core"
      ],
      "id": 3
    },
    {
      "subject": "node",
      "title": "Asyncjs",
      "ques": "",
      "links": [
        {
          "name": "http://caolan.github.io/async/v3/"
        }
      ],
      "tags": [],
      "ans": "In Node.js, the `async` module is a powerful utility library that provides various functions for handling asynchronous operations. It simplifies working with callbacks, promises, and control flow, making asynchronous code more readable and maintainable. Here are some of the commonly used methods available in the `async` module, along with code examples:\n\n1. `async.series(tasks, callback)`: Runs an array of functions in series, each passing their results to the next function in the array. The final callback is called with the results of the last function.\n\n   ```javascript\n   const async = require('async');\n\n   async.series([\n     (callback) => {\n       setTimeout(() => {\n         console.log('Task 1');\n         callback(null, 'Result 1');\n       }, 2000);\n     },\n     (callback) => {\n       setTimeout(() => {\n         console.log('Task 2');\n         callback(null, 'Result 2');\n       }, 1000);\n     },\n     (callback) => {\n       setTimeout(() => {\n         console.log('Task 3');\n         callback(null, 'Result 3');\n       }, 1500);\n     }\n   ], (err, results) => {\n     console.log('Final callback:', results);\n   });\n   ```\n\n2. `async.parallel(tasks, callback)`: Runs an array of functions in parallel, and calls the callback with the results after all the functions have completed or encountered an error.\n\n   ```javascript\n   const async = require('async');\n\n   async.parallel([\n     (callback) => {\n       setTimeout(() => {\n         console.log('Task 1');\n         callback(null, 'Result 1');\n       }, 2000);\n     },\n     (callback) => {\n       setTimeout(() => {\n         console.log('Task 2');\n         callback(null, 'Result 2');\n       }, 1000);\n     },\n     (callback) => {\n       setTimeout(() => {\n         console.log('Task 3');\n         callback(null, 'Result 3');\n       }, 1500);\n     }\n   ], (err, results) => {\n     console.log('Final callback:', results);\n   });\n   ```\n\n3. `async.waterfall(tasks, callback)`: Runs an array of functions in a waterfall manner, passing the result of each function as an argument to the next function. The final callback receives the result of the last function.\n\n   ```javascript\n   const async = require('async');\n\n   async.waterfall([\n     (callback) => {\n       setTimeout(() => {\n         console.log('Task 1');\n         callback(null, 'Result 1', 'Result 2');\n       }, 2000);\n     },\n     (arg1, arg2, callback) => {\n       setTimeout(() => {\n         console.log('Task 2', arg1, arg2);\n         callback(null, 'Result 3');\n       }, 1000);\n     },\n     (arg3, callback) => {\n       setTimeout(() => {\n         console.log('Task 3', arg3);\n         callback(null, 'Final Result');\n       }, 1500);\n     }\n   ], (err, result) => {\n     console.log('Final callback:', result);\n   });\n   ```\n\n4. `async.each(collection, iterator, callback)`: Applies an asynchronous function to each item in a collection in parallel.\n\n   ```javascript\n   const async = require('async');\n\n   const items = ['item1', 'item2', 'item3'];\n\n   async.each(items, (item, callback) => {\n     console.log('Processing:', item);\n     setTimeout(() => {\n       callback();\n     }, 1000);\n   }, (err) => {\n     if (err) {\n       console.error('Error:', err);\n     } else {\n",
      "diff": 1,
      "imp": 1,
      "cate": [
        "library"
      ],
      "id": 4
    },
    {
      "subject": "node",
      "title": "Create folder and write json",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "const fs = require('fs');\nconst path = require('path');\n\nfunction createFolderIfNotExists(folderPath) {\n  if (!fs.existsSync(folderPath)) {\n    fs.mkdirSync(folderPath);\n    console.log(`Folder created at ${folderPath}`);\n  } else {\n    console.log(`Folder already exists at ${folderPath}`);\n  }\n}\n\nfs.mkdir(\"/Users/vijaykumar/Apps/nodePrac/socket/VJ/test1/test2\", {recursive: true} ,(err, result) => {\n    if(err){\n        console.error(err)\n    } else{\n        console.log(\"*** result ::\", result)\n    }\n})\n\n// Example usage\nconst folderPath = path.join(__dirname, 'myFolder');\n\ncreateFolderIfNotExists(folderPath);\n\n\nconst fs = require('fs');\n\nconst data = {\n  name: 'John Doe',\n  age: 30,\n  email: 'johndoe@example.com'\n};\n\nconst jsonData = JSON.stringify(data, null, 2);\n\nfs.writeFile('data.json', jsonData, 'utf8', (err) => {\n  if (err) {\n    console.error('Error writing JSON file:', err);\n    return;\n  }\n  console.log('JSON file has been written successfully.');\n});",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 5
    },
    {
      "subject": "node",
      "title": "What is event-driven programming in Node.js?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "Event-driven programming is a programming paradigm that focuses on the flow of a program being driven by events. In an event-driven model, the program responds to events or signals that occur during its execution. These events can be triggered by user actions, system notifications, or other sources.\n\nIn the context of Node.js, event-driven programming is fundamental to its architecture. Node.js is built on an event-driven, non-blocking I/O model, which means that the execution flow is driven by events rather than being strictly sequential. This allows Node.js to handle large numbers of concurrent connections efficiently.\n\nNode.js uses the EventEmitter module to facilitate event-driven programming. The EventEmitter provides an implementation of the observer pattern, allowing objects (known as \"emitters\") to emit named events and register listeners (also known as \"event handlers\") to respond to those events.\n\nHere's a basic example to illustrate event-driven programming in Node.js:\n\n```javascript\nconst EventEmitter = require('events');\n\n// Create an instance of EventEmitter\nconst myEmitter = new EventEmitter();\n\n// Register an event listener for the 'myEvent' event\nmyEmitter.on('myEvent', (data) => {\n  console.log('Event occurred:', data);\n});\n\n// Emit the 'myEvent' event\nmyEmitter.emit('myEvent', 'Hello, World!');\n```\n\nIn this example, we create an instance of the EventEmitter class, `myEmitter`. We register an event listener using the `on()` method to listen for the 'myEvent' event. When the event is emitted using `emit()`, the listener function is invoked and the specified data is logged to the console.\n\nEvent-driven programming in Node.js allows you to build applications that are highly responsive, scalable, and efficient, particularly for scenarios involving I/O operations, networking, and real-time communication. By leveraging event-driven architecture, Node.js maximizes resource utilization and enables non-blocking, asynchronous handling of multiple operations concurrently.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 6
    },
    {
      "subject": "node",
      "title": "top nodejs interview questions with answer",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "Here are some commonly asked Node.js interview questions along with their answers:\n\n1. What is Node.js?\n   Answer: Node.js is an open-source, server-side JavaScript runtime environment built on Chrome's V8 JavaScript engine. It allows developers to run JavaScript code on the server, enabling them to build scalable and high-performance web applications.\n\n2. What is the difference between Node.js and JavaScript?\n   Answer: Node.js is a runtime environment that allows the execution of JavaScript code outside the browser, typically on a server. JavaScript, on the other hand, is a programming language used for creating interactive elements within web browsers.\n\n3. What is the role of package.json in Node.js?\n   Answer: package.json is a metadata file in Node.js projects that contains information about the project, its dependencies, and other configurations. It helps manage dependencies, scripts, project metadata, and versioning.\n\n4. What is npm?\n   Answer: npm (Node Package Manager) is the default package manager for Node.js. It allows developers to discover, install, and manage third-party packages and libraries in their Node.js projects.\n\n5. What is Express.js?\n   Answer: Express.js is a popular web application framework for Node.js. It provides a set of robust features and middleware to simplify the development of web applications and APIs.\n\n6. What is callback hell? How can it be avoided?\n   Answer: Callback hell refers to the situation where multiple asynchronous operations are nested inside each other, resulting in code that is difficult to read and maintain. It can be avoided by using techniques such as Promises, async/await, or using control flow libraries like async.js.\n\n7. What is middleware in Express.js?\n   Answer: Middleware in Express.js are functions that have access to the request and response objects. They can perform operations on the request or response, modify data, and pass control to the next middleware function in the stack. Middleware can be used for tasks such as logging, authentication, error handling, and more.\n\n8. What is event-driven programming in Node.js?\n   Answer: Event-driven programming is a programming paradigm where the flow of the program is determined by events. In Node.js, the core APIs and modules are built around event-driven architecture, utilizing event emitters and listeners to handle asynchronous operations effectively.\n\n9. How can you handle errors in Node.js?\n   Answer: In Node.js, errors can be handled using try-catch blocks for synchronous code. For asynchronous operations, error handling can be done using callback functions, Promises, or async/await with try-catch blocks. Express.js provides middleware for error handling using the `app.use()` method.\n\n10. What is the purpose of the `require()` function in Node.js?\n    Answer: The `require()` function is used in Node.js to import and use external modules or files. It allows you to include functionality from other modules into your application by providing the path or module name to import.\n\nThese are just a few examples of Node.js interview questions. It's important to note that interview questions can vary based on the specific role, company, and level of expertise being evaluated. It's always a good practice to study and prepare for the specific requirements of the position you are interviewing for.\n\n\nCertainly! Here are some top Node.js interview questions along with detailed explanations:\n\n1. What is Node.js?\n   Answer: Node.js is an open-source, server-side JavaScript runtime environment built on Chrome's V8 JavaScript engine. It allows developers to execute JavaScript code outside the browser, making it possible to build scalable and high-performance web applications.\n\n2. Explain the concept of non-blocking I/O in Node.js.\n   Answer: Non-blocking I/O (input/output) is a key feature of Node.js. It means that while the program is performing I/O operations, it can still continue executing other code without waiting for the I/O operation to complete. This is achieved through the use of asynchronous callbacks and event-driven architecture, which allows Node.js to handle multiple connections and operations concurrently, resulting in high scalability and performance.\n\n3. What is npm and what is its significance in Node.js?\n   Answer: npm (Node Package Manager) is the default package manager for Node.js. It is a command-line tool that allows developers to discover, install, and manage third-party libraries and packages in their Node.js projects. npm simplifies dependency management, making it easy to include external libraries and share code with other developers. It also provides versioning, script execution, and publishing capabilities.\n\n4. What is the role of the package.json file in Node.js projects?\n   Answer: package.json is a metadata file used in Node.js projects. It includes project-specific information such as the project name, version, author, dependencies, and scripts. It serves as a central configuration file that npm uses to manage project dependencies and scripts. Developers can also specify project-specific settings, build processes, and other metadata in the package.json file.\n\n5. Explain the concept of middleware in Express.js.\n   Answer: Middleware in Express.js are functions that have access to the request (`req`) and response (`res`) objects. They can perform operations on the request or response, modify data, and control the flow of the request-handling process. Middleware functions can be added to the application's request-response cycle using the `app.use()` or `app.METHOD()` functions. Middleware is often used for tasks like logging, authentication, error handling, and parsing request bodies.\n\n6. What is callback hell and how can it be avoided in Node.js?\n   Answer: Callback hell refers to the situation where multiple asynchronous operations are nested inside each other, leading to code that is difficult to read and maintain. It can be avoided by using techniques such as Promises, async/await, or using control flow libraries like async.js. Promises provide a cleaner way to handle asynchronous operations, while async/await allows writing asynchronous code in a synchronous-like manner, improving readability and maintainability.\n\n7. Explain the concept of streams in Node.js.\n   Answer: Streams in Node.js provide an interface for efficiently handling data that can be read or written sequentially, in chunks, rather than loading the entire data into memory. Streams are used for processing large files, network communication, and other I/O operations. They improve memory efficiency and reduce response times by enabling data to be processed as it arrives, rather than waiting for the entire data to be available.\n\n8. How does error handling work in Node.js?\n   Answer: Error handling in Node.js can be done using try-catch blocks for synchronous code. For asynchronous operations, errors are typically handled using callback functions, Promises, or async/await with try-catch blocks. In Express.js, error handling middleware can be used to catch and handle errors that occur during the request-response cycle. Proper error handling is important for detecting and gracefully handling errors, preventing application crashes, and providing meaningful error messages to users.\n\n9. What is clustering in Node.js and why is it useful?\n   Answer: Clustering in Node.js\n\n allows for the creation of multiple child processes (workers) that can share the same server port. It helps distribute the incoming workload across multiple CPUs or cores, enabling efficient utilization of system resources and improving application performance and scalability. Clustering is particularly useful for handling concurrent requests, improving response times, and ensuring high availability of Node.js applications.\n\n10. What are the differences between `require()` and `import` in Node.js?\n    Answer: `require()` is the CommonJS module system used in Node.js, while `import` is part of the ES6 (ECMAScript 2015) module system. `require()` is used to load modules synchronously, while `import` allows for asynchronous module loading. Additionally, `import` supports advanced features like named imports and tree shaking, which enables bundlers to eliminate unused code during the build process. Node.js has started to support `import` with the introduction of the \"ES Modules\" feature in recent versions.\n\nThese explanations should provide you with a good understanding of the concepts and topics typically covered in Node.js interviews. However, it's essential to prepare and study further based on the specific requirements of the position and the company you're interviewing with.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 7
    },
    {
      "subject": "node",
      "title": "what is the difference between async series and async waterfall in asyncjs?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "The main difference between `async.series` and `async.waterfall` in the `async` module is in how they handle the flow of asynchronous tasks and pass the results between them.\n\n1. `async.series`:\n   - Executes an array of functions in series, one after another.\n   - Each function in the series receives a callback function as an argument, which it must call to indicate completion and pass the result to the next function in the series.\n   - The final callback is called with the results of the last function in the series.\n   - The result of each function is passed as an argument to the next function.\n   - If any function encounters an error, the series stops executing, and the final callback is immediately called with the error.\n\n   ```javascript\n   async.series([\n     (callback) => {\n       // Task 1\n       callback(null, 'Result 1');\n     },\n     (callback) => {\n       // Task 2\n       callback(null, 'Result 2');\n     },\n     // ...\n   ], (err, results) => {\n     // Final callback\n   });\n   ```\n\n2. `async.waterfall`:\n   - Executes an array of functions in a waterfall manner, passing the result of each function as an argument to the next function.\n   - Each function in the waterfall receives one or more arguments (the result of the previous function(s)) and a callback function.\n   - The callback function must be called to indicate completion and pass the result to the next function in the waterfall.\n   - The final callback is called with the result of the last function in the waterfall.\n   - If any function encounters an error, the waterfall stops executing, and the final callback is immediately called with the error.\n\n   ```javascript\n   async.waterfall([\n     (callback) => {\n       // Task 1\n       callback(null, 'Result 1');\n     },\n     (arg1, callback) => {\n       // Task 2, receives arg1 as the result of Task 1\n       callback(null, 'Result 2');\n     },\n     // ...\n   ], (err, result) => {\n     // Final callback\n   });\n   ```\n\nIn summary, `async.series` executes functions in series, passing the results between them as arguments, while `async.waterfall` executes functions in a waterfall manner, passing the result of each function as an argument to the next function. The choice between them depends on the specific requirements of your async code flow.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 8
    },
    {
      "subject": "node",
      "title": "Socket.io in nodejs",
      "ques": "",
      "links": [
        {
          "name": "https://chat.openai.com/share/5833dd0c-08ff-4009-80f1-5f56b2dae5bc"
        }
      ],
      "tags": [],
      "ans": "To implement socket.io when the Node.js server and React client are on different ports, you'll need to configure the server and client to allow cross-origin connections. Here's how you can do it:\n\nServer-side (Node.js):\n\n1. Install the `cors` and `socket.io` libraries by running the following command in your Node.js project directory:\n   ```\n   npm install cors socket.io\n   ```\n\n2. Update your server-side code (`server.js`) to include the `cors` middleware and configure CORS for socket.io:\n\n   ```javascript\n   const express = require('express');\n   const http = require('http');\n   const socketIO = require('socket.io');\n   const cors = require('cors');\n\n   const app = express();\n   const server = http.createServer(app);\n   const io = socketIO(server);\n\n   // Apply CORS middleware\n   app.use(cors());\n\n   // Handle socket connection\n   io.on('connection', (socket) => {\n     console.log('Client connected.');\n\n     // Handle incoming messages from clients\n     socket.on('message', (data) => {\n       console.log('Received:', data);\n\n       // Broadcast the message to all connected clients\n       io.emit('message', data);\n     });\n\n     // Handle client disconnection\n     socket.on('disconnect', () => {\n       console.log('Client disconnected.');\n     });\n   });\n\n   // Start the server\n   const port = 3001; // choose any available port\n   server.listen(port, () => {\n     console.log(`Server listening on port ${port}`);\n   });\n   ```\n\nClient-side (React):\n\n1. In your React component, e.g., `Chat.js`, import the `socket.io-client` library and create a socket connection:\n\n   ```jsx\n   import React, { useEffect, useState } from 'react';\n   import socketIOClient from 'socket.io-client';\n\n   const Chat = () => {\n     // ...\n\n     useEffect(() => {\n       const socket = socketIOClient('http://localhost:3001'); // Change the URL to your server's URL\n\n       // ...\n     }, []);\n\n     // ...\n   };\n   ```\n\n   In the `socketIOClient` function, provide the URL of your Node.js server, including the correct port number.\n\n   Note: By default, `socket.io-client` will attempt to connect using the WebSocket transport. If the server and client are on different ports, make sure the server allows WebSocket connections.\n\nEnsure that the Node.js server and the React client are running simultaneously on their respective ports. The server should have CORS configured to allow cross-origin requests, and the client should connect to the correct server URL.\n\nWith these configurations, the React client should be able to establish a socket.io connection with the Node.js server, even if they are on different ports.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 9
    },
    {
      "subject": "node",
      "title": "what are file operations possible in nodejs",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "Node.js provides several built-in modules for performing file operations. Here are some common file operations you can perform in Node.js:\n\n1. Reading Files:\n   - `fs.readFile(path[, options], callback)`: Asynchronously reads the entire contents of a file.\n   - `fs.readFileSync(path[, options])`: Synchronously reads the entire contents of a file.\n\n2. Writing Files:\n   - `fs.writeFile(file, data[, options], callback)`: Asynchronously writes data to a file, replacing the file if it already exists.\n   - `fs.writeFileSync(file, data[, options])`: Synchronously writes data to a file, replacing the file if it already exists.\n\n3. Appending to Files:\n   - `fs.appendFile(file, data[, options], callback)`: Asynchronously appends data to a file, creating the file if it does not exist.\n   - `fs.appendFileSync(file, data[, options])`: Synchronously appends data to a file, creating the file if it does not exist.\n\n4. Renaming Files:\n   - `fs.rename(oldPath, newPath, callback)`: Asynchronously renames a file or moves it to a different location.\n   - `fs.renameSync(oldPath, newPath)`: Synchronously renames a file or moves it to a different location.\n\n5. Deleting Files:\n   - `fs.unlink(path, callback)`: Asynchronously deletes a file.\n   - `fs.unlinkSync(path)`: Synchronously deletes a file.\n\n6. Checking File or Directory Existence:\n   - `fs.exists(path, callback)`: Asynchronously checks if a file or directory exists.\n   - `fs.existsSync(path)`: Synchronously checks if a file or directory exists.\n\n7. Creating Directories:\n   - `fs.mkdir(path[, options], callback)`: Asynchronously creates a new directory.\n   - `fs.mkdirSync(path[, options])`: Synchronously creates a new directory.\n\n8. Reading Directories:\n   - `fs.readdir(path[, options], callback)`: Asynchronously reads the contents of a directory.\n   - `fs.readdirSync(path[, options])`: Synchronously reads the contents of a directory.\n\nThese are just a few examples of the file operations available in Node.js. The `fs` (file system) module provides a wide range of functionality for interacting with files and directories. You can refer to the Node.js documentation for more detailed information on each of these functions and additional file operations: https://nodejs.org/api/fs.html",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 10
    },
    {
      "subject": "node",
      "title": "how to use stream in nodejs?",
      "ques": "",
      "links": [
        {
          "name": "https://nodejs.org/api/stream.html"
        }
      ],
      "tags": [],
      "ans": "In Node.js, streams are used to handle streaming data, allowing you to efficiently process and transfer large amounts of data in chunks. Streams provide an abstraction for handling I/O operations and can be used for reading from or writing to files, network sockets, or other data sources. Here's an overview of how to use streams in Node.js:\n\n1. Creating Streams:\n   - Readable Streams: To create a readable stream, you can use the `fs.createReadStream()` method to read data from a file or `http.get()` method to read data from a web server.\n   - Writable Streams: To create a writable stream, you can use the `fs.createWriteStream()` method to write data to a file or `http.request()` method to send data to a web server.\n\n2. Piping Streams:\n   - Piping is a convenient way to transfer data between streams.\n   - You can pipe the output of a readable stream to the input of a writable stream using the `pipe()` method.\n\n   ```javascript\n   const fs = require('fs');\n\n   const readableStream = fs.createReadStream('input.txt');\n   const writableStream = fs.createWriteStream('output.txt');\n\n   readableStream.pipe(writableStream);\n   ```\n\n3. Handling Events:\n   - Streams emit various events that you can listen to and handle.\n   - Common events include `'data'` (emitted when data is available to be read), `'end'` (emitted when there is no more data to be read), and `'error'` (emitted when an error occurs).\n\n   ```javascript\n   const fs = require('fs');\n\n   const readableStream = fs.createReadStream('input.txt');\n\n   readableStream.on('data', (chunk) => {\n     console.log(`Received ${chunk.length} bytes of data.`);\n   });\n\n   readableStream.on('end', () => {\n     console.log('No more data to read.');\n   });\n\n   readableStream.on('error', (error) => {\n     console.error(`An error occurred: ${error.message}`);\n   });\n   ```\n\n4. Transform Streams:\n   - Transform streams are a type of duplex streams that allow you to modify or transform data as it passes through the stream.\n   - You can create a transform stream by extending the `Transform` class from the `stream` module and implementing the `_transform` method.\n\n   ```javascript\n   const { Transform } = require('stream');\n\n   class MyTransformStream extends Transform {\n     _transform(chunk, encoding, callback) {\n       // Transform data here\n       const transformedChunk = chunk.toString().toUpperCase();\n\n       this.push(transformedChunk); // Push transformed data to the writable stream\n       callback();\n     }\n   }\n\n   const transformStream = new MyTransformStream();\n\n   // Piping readable stream to transform stream to writable stream\n   readableStream.pipe(transformStream).pipe(writableStream);\n   ```\n\nThese are some basic concepts and usage examples of streams in Node.js. Streams provide an efficient way to handle large data sets, enabling you to process and transfer data in chunks, which is particularly useful when dealing with files, network communication, or other I/O operations. For more details and advanced usage, you can refer to the official Node.js documentation on streams: https://nodejs.org/api/stream.html",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 11
    },
    {
      "subject": "node",
      "title": "how to implement clustering in nodejs?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "Clustering in Node.js allows you to utilize multiple processes and distribute the workload across them, taking advantage of multi-core systems and improving the performance and scalability of your Node.js applications. Here's an overview of how to implement clustering in Node.js:\n\n1. Use the `cluster` module:\n   - Node.js provides the built-in `cluster` module to enable clustering.\n   - You can require the `cluster` module in your Node.js application to utilize its functionalities.\n\n   ```javascript\n   const cluster = require('cluster');\n   ```\n\n2. Check if the current process is the master process:\n   - The master process is responsible for creating and managing the worker processes.\n   - You can use the `cluster.isMaster` property to determine if the current process is the master process.\n\n   ```javascript\n   if (cluster.isMaster) {\n     // Code for the master process\n   }\n   ```\n\n3. Fork worker processes:\n   - Inside the master process, you can use the `cluster.fork()` method to create worker processes.\n   - Each worker process runs the same Node.js application independently.\n\n   ```javascript\n   if (cluster.isMaster) {\n     const numWorkers = require('os').cpus().length;\n\n     for (let i = 0; i < numWorkers; i++) {\n       cluster.fork();\n     }\n   }\n   ```\n\n4. Handle events in the master process:\n   - You can listen to events in the master process to handle worker process-related events, such as when a worker process is forked, exits, or disconnects.\n\n   ```javascript\n   if (cluster.isMaster) {\n     cluster.on('fork', (worker) => {\n       console.log(`Worker ${worker.id} is forked.`);\n     });\n\n     cluster.on('exit', (worker, code, signal) => {\n       console.log(`Worker ${worker.id} has exited with code ${code} and signal ${signal}.`);\n     });\n\n     // ...\n   }\n   ```\n\n5. Implement the worker process logic:\n   - Inside the worker processes, you can write the logic specific to each worker process.\n   - This includes listening to network ports, handling requests, and performing the required operations.\n\n   ```javascript\n   if (!cluster.isMaster) {\n     const http = require('http');\n\n     const server = http.createServer((req, res) => {\n       res.writeHead(200);\n       res.end('Hello from worker process!');\n     });\n\n     server.listen(3000);\n   }\n   ```\n\nBy implementing clustering in your Node.js application, you can distribute the workload across multiple processes, effectively utilizing the available system resources and improving the performance and scalability of your application. The `cluster` module provides a simple way to achieve this, allowing you to create and manage worker processes for improved handling of concurrent requests.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 12
    },
    {
      "subject": "node",
      "title": "what are security concerns in nodejs?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "When developing Node.js applications, it's important to be aware of and address various security concerns to ensure the safety and integrity of your application and its data. Here are some common security concerns in Node.js:\n\n1. Injection Attacks:\n   - SQL Injection: Improperly validated user inputs can lead to SQL injection attacks where malicious SQL queries are executed against your database.\n   - Command Injection: Similar to SQL injection, command injection occurs when user inputs are executed as commands on the underlying operating system.\n\n2. Cross-Site Scripting (XSS):\n   - XSS attacks occur when user-supplied data is rendered on the client-side without proper sanitization, allowing malicious scripts to execute in the user's browser.\n\n3. Cross-Site Request Forgery (CSRF):\n   - CSRF attacks involve tricking users into performing unwanted actions on a website without their knowledge or consent.\n   - To mitigate CSRF attacks, you can implement techniques such as CSRF tokens, checking referrer headers, or employing the SameSite attribute in cookies.\n\n4. Insecure Dependencies:\n   - Node.js applications often rely on third-party packages and libraries, which may contain vulnerabilities.\n   - Regularly update and patch your dependencies, and use tools like npm audit to identify and address known security vulnerabilities.\n\n5. Insecure Authentication and Authorization:\n   - Weak or improperly implemented authentication mechanisms can lead to unauthorized access to user accounts.\n   - Store user passwords securely using techniques like bcrypt hashing with salts.\n   - Implement proper session management and access controls to ensure that only authorized users can access sensitive resources.\n\n6. Secure Configuration:\n   - Improperly configured application settings, such as using default or weak passwords, can expose your application to security risks.\n   - Ensure that sensitive configuration data, such as database credentials or API keys, are properly secured and not exposed in source code repositories or accessible to unauthorized individuals.\n\n7. Denial of Service (DoS) Attacks:\n   - Node.js applications can be vulnerable to DoS attacks, where attackers attempt to overwhelm the system with a high volume of requests, exhausting system resources.\n   - Implement rate limiting, request validation, and other defensive mechanisms to mitigate the impact of DoS attacks.\n\n8. Error Handling and Logging:\n   - Proper error handling and logging are essential for detecting and responding to security incidents.\n   - Avoid exposing sensitive information in error messages that could be useful to attackers.\n   - Implement secure logging practices to ensure that logs are protected and accessible only to authorized personnel.\n\n9. Secure Communication:\n   - Protect sensitive data transmitted over networks by using secure protocols such as HTTPS.\n   - Implement proper SSL/TLS certificate management and configuration to ensure secure communication between clients and servers.\n\n10. Regular Security Audits and Updates:\n    - Regularly review and update your application's security practices.\n    - Stay updated with security advisories, patches, and best practices from the Node.js community and security resources.\n\nIt's important to adopt a proactive approach to security by considering these concerns and implementing appropriate security measures throughout the development lifecycle of your Node.js applications.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 13
    },
    {
      "subject": "node",
      "title": "what are ways through which we can improve performance and memory utilization in nodejs?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "To improve performance and memory utilization in Node.js applications, you can employ various techniques and best practices. Here are some ways to achieve better performance and memory utilization:\n\n1. Optimize Code:\n   - Identify and optimize performance bottlenecks in your code by using profiling tools like Node.js built-in profiler or third-party tools like Clinic.js or New Relic.\n   - Use efficient algorithms and data structures to improve the execution time and memory usage of your code.\n   - Minimize unnecessary operations and avoid blocking or synchronous I/O calls that can degrade performance.\n\n2. Leverage Asynchronous I/O:\n   - Node.js excels in handling asynchronous I/O operations. Utilize asynchronous programming techniques, such as callbacks, Promises, or async/await, to prevent blocking the event loop and improve concurrency.\n   - Use non-blocking I/O libraries and functions to avoid thread blocking and make better use of system resources.\n\n3. Implement Caching:\n   - Introduce caching mechanisms to reduce the load on your application and improve response times.\n   - Cache frequently accessed data or expensive computations in memory or external cache stores like Redis or Memcached.\n\n4. Load Balancing and Scaling:\n   - Distribute the workload across multiple Node.js instances using load balancing techniques, such as clustering or employing a load balancer (e.g., Nginx or HAProxy) in front of your Node.js application.\n   - Scale horizontally by adding more servers or instances to handle increased traffic and load.\n\n5. Optimize Network and Database Operations:\n   - Minimize network round-trips by combining multiple requests into a single request using techniques like batching or data aggregation.\n   - Optimize database queries by creating appropriate indexes, using query optimizations, and reducing unnecessary data fetching.\n\n6. Memory Management:\n   - Use memory-efficient data structures and algorithms to minimize memory consumption.\n   - Avoid memory leaks by properly managing resources, closing database connections, and releasing unused memory.\n   - Employ tools like `heapdump` or `memwatch-next` to analyze and debug memory-related issues.\n\n7. Monitoring and Performance Tuning:\n   - Continuously monitor your application's performance using tools like Node.js Profiler, monitoring services (e.g., New Relic, Datadog), or custom monitoring solutions.\n   - Identify performance bottlenecks, memory leaks, or excessive resource consumption and apply necessary optimizations.\n\n8. Properly Configure Node.js:\n   - Adjust Node.js configuration parameters, such as the maximum heap size (`--max-old-space-size`), thread pool size, or garbage collection settings, to optimize memory usage and performance.\n   - Experiment with different configurations and benchmark your application to find the optimal settings for your specific workload.\n\n9. Use C/C++ Addons:\n   - For CPU-intensive tasks, consider implementing performance-critical parts of your application using C/C++ addons, which can be significantly faster than pure JavaScript implementations.\n\n10. Employ Caching and Content Delivery Networks (CDNs):\n    - Utilize caching mechanisms at different levels, such as in-memory caching, CDN caching, or browser caching, to serve static assets and reduce the load on your server.\n\nBy implementing these techniques, you can significantly improve the performance and memory utilization of your Node.js applications, making them more efficient and scalable. However, it's essential to analyze and profile your application's performance to identify specific areas for improvement and conduct thorough testing to ensure the optimizations don't introduce any unintended side effects.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 14
    },
    {
      "subject": "node",
      "title": "what are the use case in nodejs where memory leak may occur? explain with code example",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "\nMemory leaks can occur in Node.js when objects or data are unintentionally retained in memory, preventing them from being garbage-collected and leading to excessive memory consumption. Here are a few common use cases in Node.js where memory leaks may occur:\n\n1. Event listeners without proper cleanup:\n\n```javascript\nconst EventEmitter = require('events');\n\nconst emitter = new EventEmitter();\n\nfunction startProcessing() {\n  emitter.on('data', processData);\n}\n\nfunction processData(data) {\n  // Process data\n}\n\nfunction stopProcessing() {\n  emitter.off('data', processData);\n}\n\n// Start processing data\nstartProcessing();\n\n// Stop processing data\nstopProcessing();\n```\n\nIn the above example, the `startProcessing` function registers an event listener for the `'data'` event using `emitter.on()`. However, when the processing is stopped by calling `stopProcessing`, the event listener should be removed using `emitter.off()`. If the `off` call is omitted, the event listener will continue to be referenced, preventing its garbage collection and causing a memory leak.\n\n2. Caching large amounts of data:\n\n```javascript\nconst cache = {};\n\nfunction fetchData(key) {\n  if (cache[key]) {\n    return cache[key];\n  }\n\n  const data = expensiveDataFetchingOperation();\n  cache[key] = data;\n  return data;\n}\n```\n\nIn this example, data fetched from an expensive operation is stored in a cache object for subsequent retrievals. However, if the cache grows indefinitely without any mechanism for expiration or eviction, it can lead to memory leaks. This is particularly problematic if the cached data is large or the cache keys are dynamically generated and can potentially result in an unbounded memory consumption.\n\nTo avoid this, consider implementing a cache eviction strategy (e.g., using a maximum cache size, time-based expiration, or LRU algorithm) to ensure that the cache remains within reasonable memory limits.\n\n3. Streams and pipelines:\n\n```javascript\nconst fs = require('fs');\n\nfunction processFile(filePath) {\n  const stream = fs.createReadStream(filePath);\n\n  // Read stream and process data\n  stream.on('data', processData);\n  stream.on('end', () => {\n    // Clean up resources\n    stream.close();\n  });\n}\n```\n\nWhen working with streams and pipelines in Node.js, it's crucial to handle events like `'end'` or `'finish'` appropriately to ensure proper cleanup. Failing to do so can result in lingering references to streams, preventing them from being garbage-collected and leading to memory leaks.\n\nIn the above code snippet, the `'end'` event is used to signal the end of reading the stream, and the `stream.close()` method is called to clean up resources. Neglecting to call `close()` or properly handle other relevant events can result in memory leaks.\n\nTo mitigate memory leaks in these scenarios, it's important to ensure proper cleanup by removing event listeners, releasing resources, and implementing strategies like cache eviction or limiting the size of stored data. Additionally, using tools like memory profilers or heap analyzers can help identify and resolve memory leaks in more complex scenarios.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 15
    },
    {
      "subject": "node",
      "title": "How to create server in Nodejs",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "Express\n--------\n\nTo implement a simple Node.js server, you can follow these steps:\n\n1. Set up a new Node.js project: Create a new directory for your project and navigate to it in your terminal. Run `npm init` to initialize a new Node.js project and follow the prompts to set up your `package.json` file.\n\n2. Install dependencies: Install the `express` package, which is a popular framework for building web applications in Node.js. Run the following command in your project directory:\n\n   ```bash\n   npm install express\n   ```\n\n3. Create a new JavaScript file: Create a new file, such as `server.js`, in your project directory.\n\n4. Import the necessary modules: In your `server.js` file, import the required modules:\n\n   ```javascript\n   const express = require('express');\n   ```\n\n5. Create an instance of the Express application: Initialize an instance of the Express application:\n\n   ```javascript\n   const app = express();\n   ```\n\n6. Define routes and endpoints: Set up the routes and define the desired endpoints for your server. For example:\n\n   ```javascript\n   app.get('/', (req, res) => {\n     res.send('Hello, world!');\n   });\n   ```\n\n   In the above code snippet, we define a GET route for the root URL (`/`) and send a simple response of \"Hello, world!\".\n\n7. Start the server: Add the following code to start the server and listen on a specific port:\n\n   ```javascript\n   const port = 3000; // Specify the port number you want to use\n\n   app.listen(port, () => {\n     console.log(`Server is running on port ${port}`);\n   });\n   ```\n\n8. Start the server: In your terminal, run the following command to start the server:\n\n   ```bash\n   node server.js\n   ```\n\n   You should see the message \"Server is running on port 3000\" in the console.\n\n9. Test the server: Open your web browser and visit `http://localhost:3000` (or the specified port number). You should see the \"Hello, world!\" message displayed in your browser.\n\nThat's it! You have successfully implemented a simple Node.js server using Express. You can add more routes, middleware, and functionality as needed for your specific application.\n\n\nNodejs\n-------\n\nTo implement a simple Node.js server without using a framework like Express, you can utilize the built-in `http` module in Node.js. Here's a basic example:\n\n1. Create a new JavaScript file, such as `server.js`.\n\n2. Import the necessary modules:\n```javascript\nconst http = require('http');\n```\n\n3. Define the request handler function:\n```javascript\nconst requestHandler = (req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, world!');\n};\n```\n\nIn the above code, we set the response status code to 200 and the content type to 'text/plain'. Then, we send the response with the message 'Hello, world!'.\n\n4. Create an HTTP server instance:\n```javascript\nconst server = http.createServer(requestHandler);\n```\n\nHere, we create an HTTP server instance using the `createServer` method and pass in the `requestHandler` function to handle incoming requests.\n\n5. Specify the port and start the server:\n```javascript\nconst port = 3000; // Specify the port number you want to use\n\nserver.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nWe specify the port number (e.g., 3000) on which the server should listen, and then start the server by calling the `listen` method.\n\n6. Start the server:\nIn your terminal, navigate to the project directory and run the following command:\n```bash\nnode server.js\n```\n\nYou should see the message \"Server is running on port 3000\" in the console.\n\n7. Test the server:\nOpen your web browser and visit `http://localhost:3000` (or the specified port number). You should see the \"Hello, world!\" message displayed in your browser.\n\nThat's it! You have implemented a basic Node.js server without using Express. You can extend this code to handle different routes, handle various HTTP methods, and add additional functionality as per your requirements.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 16
    },
    {
      "subject": "node",
      "title": "what are different different http codes ?",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "HTTP status codes are three-digit numbers that are returned by a server in response to a client's request. They indicate the outcome of the request or provide information about the server's response. Here are some of the commonly encountered HTTP status codes along with their general categories:\n\n1xx - Informational\n- 100: Continue\n- 101: Switching Protocols\n- 102: Processing\n\n2xx - Success\n- 200: OK\n- 201: Created\n- 204: No Content\n- 206: Partial Content\n\n3xx - Redirection\n- 301: Moved Permanently\n- 302: Found\n- 304: Not Modified\n- 307: Temporary Redirect\n\n4xx - Client Errors\n- 400: Bad Request\n- 401: Unauthorized\n- 403: Forbidden\n- 404: Not Found\n- 405: Method Not Allowed\n- 409: Conflict\n- 429: Too Many Requests\n\n5xx - Server Errors\n- 500: Internal Server Error\n- 502: Bad Gateway\n- 503: Service Unavailable\n- 504: Gateway Timeout\n\nThese are just a few examples of the numerous HTTP status codes available. Each status code carries a specific meaning and provides information about the outcome of the request. It's important to handle these codes appropriately in your applications to provide meaningful responses to clients and handle errors gracefully.",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 17
    },
    {
      "subject": "node",
      "title": "Free API course",
      "ques": "",
      "links": [
        {
          "name": "https://www.linkedin.com/feed/update/urn:li:activity:7078408639631245312/"
        }
      ],
      "tags": [],
      "ans": "",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 18
    }
  ],
  "eng": [
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "tech"
        }
      ],
      "ans": "* strange bugs can creep into your software\n* data flow in your program is lossy\n* But frozen objects are only superficially immutable.\n* Declarative rather than imperative code (what to do, rather than how to do it)\n* If you keep your side effects separate from the rest of your program logic, your software will be much easier to extend, refactor, debug, test, and maintain.\n* key to writing bulletproof code and being a better developer",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 1
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [
        {
          "name": "tongue-twister"
        }
      ],
      "ans": "exponentially\ngazil- lion\nplanning horizon\nunbelievable\nstandardise\nbreathtakingly\nReasonably - ree·zuh·nuh·blee",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 2
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "- I have got things to show, that no one’s ever seen\n- I have got habits that are hard to break\n- I swear each morning, when I wake today,s the day, I am coming clean\n- I have got dreams that might not come to any kind of fruition\n",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 3
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "- I have got cracks in my facade, I may fall between \n- “To escape and sit quietly on the beach - that’s my idea of paradise.”\n- True friends say good things behind your back and bad things to your face. .. Friends like family\n- My Heart is filled with Love and Gratitude\n- I love it when you call me Señorita, I wish I could pretend I didn't need you\n",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 4
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "- “Body is not stiff. Mind is stiff.”\n- So here is the Gorgeous Niti Dancing with her Gang because where is the fun without the bride \n- What should I ROB next? All your hearts are already mine\n- Beyond the crowds and city lights!\n- I had the pleasure of visiting #NYC with the spark of my fire, the light of my life, the wind under my wings and the one and only ‘Senorita’ of my love story. We also found a city in the far far west that resonated with us in so many levels.  A glimpse of us in the U.S of A!\n",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 5
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "- A lil party never hurt anybody. Except our parties are not lil.\n- The joy of getting back on the field. Been a long time\n- It’s a wrap! What a fun ride this has been. Much love and ounces of gratitude to the whole team of\n- A tsunami of flavours in your mouth\n- The farthest distance in the world is between how it is and how you thought it was gonna be ",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 6
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "1.Now thanks fully, we are the much less intimidating \n2.the accelerated velocity of terminological inexactitude.\nWhich is just my obnoxious way of saying that lies travel fast\n3.depraved behaviour \n4.indecency\n5.I hope for your sake that God has a sense of humor,\nOh I have 17 year’s worth of anecdotal proof he does\n",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 7
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "6.I am not nearly as smart as I think I am\n7.Great, now i an a tramp\n8.I am gonna have to get a lower back tattoo\n   and pierce something not on my face.\n9.you would testify to that?\n10.It’s a little low on grist\n",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 8
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "11.clever wordplay \n12.ten-story building \n13.it could find me if i was dressed as a crack on a sidewalk\n14.people hear you had sex once and, bam, you’re a bimbo\n15.but I gotta admit, I kind of liked being on the map\n",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 9
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "16.I am gonna throw some rhymes\n     Anson, drop me a beat\n17.big, hulking black guy\n18.is besmirched and made to wear a red A for “adulterer”\n19.perhaps you should embroider a red A on your wardrobe, abominable tramp\nPerhaps you should get a wardrobe, you abominable twat\n20.it was provocative enough to land me in the principal office\n21.A snide comment from a snotty girl in my class\n22.From the blood I saw gushing out of your nose, I thought you were bullied",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 10
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [
        {
          "name": "https://www.youtube.com/watch?v=h3U5TX19tXA"
        }
      ],
      "tags": [],
      "ans": "\n*MTP - Medium Term Plan\n\n*Moonshot - meant \"long shot,\" it's increasingly being used to describe a monumental effort and a lofty goal—in other words, a \"giant leap.\"\n\n*jarvis - ust A Rather Very Intelligent System\n\n*UBI - Universal Basic Income\n\n*obscure - Unclear\n\n*chaotic - in a state of complete confusion and disorder.\n\n*dystopian - relating to or denoting an imagined state or society where there is great suffering or injustice\n\n*humanoid - having an appearance or character resembling that of a human.\n\n*Technological signularity - The technological singularity is the point at which artificial intelligence will surpass human intelligence, leading to a future in which machines can learn and innovate on their own. Some experts believe that this could happen within the next few decades, while others believe it is still centuries away",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 11
    },
    {
      "subject": "eng",
      "title": "",
      "ques": "",
      "links": [],
      "tags": [],
      "ans": "\n*Vertical v/s horizontal business\n\n*discrete business problem\n\n*GBU - Global Business Unit\n\n*\n\n",
      "diff": 1,
      "imp": 1,
      "cate": "",
      "id": 12
    }
  ],
  "puz": [],
  "man": []
}